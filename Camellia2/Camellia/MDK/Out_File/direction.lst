C251 COMPILER V5.60.0,  direction                                                          28/05/24  12:17:14  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE direction
OBJECT MODULE PLACED IN .\Out_File\direction.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\direction.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED
                    -) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE
                    -;..\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\direction.lst) TABS(2) OBJECT(.\Out_F
                    -ile\direction.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 21:24:19
    5           * @LastEditTime: 2024-01-19 11:52:20
    6           * @LastEditors: Yzhi
    7           */
    8          #include "myconfig.h"
    9          
   10          #define out_max 20000
   11          #define Angle_MAX 3500
   12          
   13          
   14          
   15          float Nh_P = 120; // 0.5
   16          float Nh_D = 30; // 4.1
   17          float Wh_P = 1.25;
   18          float Wh_D = 2 ;
   19          float gyro_z3 = 0;
   20          
   21          float KP1 = 35;
   22          float KP2 = 0.2;
   23          float KP3 = 0; 
   24          float KD1 = 0;
   25          float Feedforward_gain = 0;
   26          
   27          
   28          float Angle_Speed_P = 415;
   29          float Angle_Speed_I = 9.2;
   30          
   31          float Target_Vel_Z_pre = 0;
   32          int Speed_Ring_Flag = 0;
   33          
   34          Position_PID_InitTypedef Position;
   35          
   36          /**
   37           * @brief 外环
   38           *
   39           * @param chazhi 电感差值PD控制
   40           * @param dir_p  KP
   41           * @param dir_d  KD
   42           * @return int   外环返回值
   43           */
   44          
   45          float wh_Turn_Out(int16 chazhi, float dir_p, float dir_d)
   46          {
   47   1        float error;
   48   1        static float last_error = 0;
   49   1        float Output;
   50   1        float error_derivative;
   51   1      
   52   1        error = chazhi;
   53   1      
   54   1        error_derivative = error - last_error;
   55   1      
   56   1        Output = error * dir_p + error_derivative * dir_d;
C251 COMPILER V5.60.0,  direction                                                          28/05/24  12:17:14  PAGE 2   

   57   1      
   58   1        last_error = error;
   59   1      
   60   1        Target_Vel_Z_pre = Output;
   61   1      
   62   1        return Output;
   63   1      }
   64          
   65          /**
   66           * @brief 内环角速度PI控制
   67           *
   68           * @param err   外环输入值
   69           * @param dir_p
   70           * @param dir_i
   71           * @return int
   72           */
   73          int16 nh_Turn_Out(float err, float dir_p, float dir_d)
   74          {
   75   1        float error,KP,KD;
   76   1      
   77   1        static float last_error;
   78   1      
   79   1        float price_Differention;
   80   1      
   81   1        float price_Proportion;
   82   1      
   83   1        static float Pre1_Error[4];
   84   1      
   85   1        float Direct_Parameter;
   86   1      
   87   1      
   88   1        KP=dir_p ; // 不要调
   89   1      
   90   1        KD=dir_d; // 不要调
   91   1      
   92   1      
   93   1        error = err * 8.5 - imu660ra_gyro_z * 1.2; // 转向内环参数，一般不用改，改变后面的参
             -数，改变阻尼大小
   94   1        // 转向PD控制
   95   1        price_Proportion = dir_p * error;
   96   1      
   97   1        price_Differention = dir_d * (error - last_error);
   98   1      
   99   1        Direct_Parameter = price_Proportion + price_Differention; //(1+error*error*0.000000001f)
  100   1      
  101   1        last_error = error;
  102   1      
  103   1        Pre1_Error[3] = Pre1_Error[2];
  104   1      
  105   1        Pre1_Error[2] = Pre1_Error[1];
  106   1      
  107   1        Pre1_Error[1] = Pre1_Error[0];
  108   1      
  109   1        Pre1_Error[0] = Direct_Parameter;
  110   1      
  111   1        Direct_Parameter = Pre1_Error[0] * 0.8 + Pre1_Error[1] * 0.1 + Pre1_Error[2] * 0.06 + Pre1_Error[3] * 0
             -.04;
  112   1      
  113   1        return  (int16)(Direct_Parameter);
  114   1      }
  115          
  116          /**
  117           * @brief 方向环，串级PID给电机
  118           *
  119           * @return int
  120           */
C251 COMPILER V5.60.0,  direction                                                          28/05/24  12:17:14  PAGE 3   

  121          
  122          void Dir_PID_Init(void)
  123          {
  124   1        Position.kP1 = KP1;
  125   1        Position.kP2 = KP3;
  126   1        Position.kP3 = KP2;
  127   1        Position.kD  = KD1;
  128   1        Position.feedforward_gain = Feedforward_gain;
  129   1      }
  130          
  131          
  132          
  133          //K1 适合直道   K2适合弯中的姿态(内切)
  134          int16 DirControl(int error)
  135          {
  136   1        Position.err = error;
  137   1        Position.KP_Val = (int16)(Position.kP1 * Position.err + Position.kP2 * Position.err * Position.err * Po
             -sition.err);
  138   1        Position.kD_Val = (int16)(Position.kD*mpu6050_gyro_z);
  139   1        Position.err_last = Position.err;
  140   1        Position.feedforward_Val = Position.feedforward_gain * error;
  141   1        Position.Out = Position.KP_Val + Position.kD_Val + Position.feedforward_Val;
  142   1        return (int16)Position.Out;
  143   1      }
  144          
  145          
  146          
  147          // int DirControl(void)
  148          // {
  149          //   int error = 0;
  150          //   static int last_error;
  151          //   int out = 0;
  152          //   error = Inductance_Error;
  153          //   out = error * KP1 + error * asb(error) * KP2 + (error - last_error) * KD1 - imu660ra_gyro_z / 65.6 *
             - KD1;
  154          //   last_error = error;
  155          //   return out;
  156          // }
  157          
  158          /**
  159           * @brief 角度环
  160           *
  161           * @param target 目标角度
  162           * @param p
  163           * @param d
  164           * @return int
  165           */
  166          int Angle_Ring(double target, float p, float d)
  167          {
  168   1        float error;
  169   1        int Output, Angle_Speed;
  170   1        static float last_error, error2;
  171   1        gyro_z3 += Get_Gyro_Z;
  172   1        error = target - gyro_z3;
  173   1        error2 = error - last_error;
  174   1        last_error = error;
  175   1        Output = (int)(error * p + error2 * d);
  176   1        Output = limit(Output, 1000);
  177   1        Angle_Speed_Ring(Output, Angle_Speed_P, Angle_Speed_I);
  178   1        if (abs(error) <= 2) // 如何小于指定角度，表示角度ok
  179   1        {
  180   2          gyro_z3 = 0; // 角度积分清零
  181   2          last_error = 0;
  182   2          error2 = 0;
  183   2          return 1;
  184   2        }
C251 COMPILER V5.60.0,  direction                                                          28/05/24  12:17:14  PAGE 4   

  185   1        else
  186   1          return 0;
  187   1      }
*** WARNING C47 IN LINE 169 OF ..\USER\Hardware\direction.c: 'Angle_Speed': unreferenced local variable
  188          
  189          /**
  190           * @brief 角速度环
  191           *
  192           * @param err
  193           * @param dir_p
  194           * @param dir_i
  195           * @return int
  196           */
  197          int Angle_Speed_Ring(int err, float dir_p, float dir_i)
  198          {
  199   1        int error1 = 0;
  200   1        static float last_err = 0, nh_out = 0, P_out = 0, I_out = 0, out = 0;
  201   1        error1 = err - Get_Gyro_Z*10;
  202   1        P_out = dir_p * (error1 - last_err);
  203   1        I_out = dir_i * error1;
  204   1        if (I_out > 2000)
  205   1          I_out = 2000;
  206   1        if (I_out < -2000)
  207   1          I_out = -2000;
  208   1        out = P_out + I_out;
  209   1        nh_out += out;
  210   1        last_err = error1;
  211   1        nh_out = limit(nh_out, 9500);
  212   1        Motor_PWM(-nh_out, nh_out);
  213   1        return nh_out;
  214   1      }
  215          
  216          int DirControl_2(int16 chazhi, float dir_p, float dir_d, float dir_d2)
  217          {
*** WARNING C57 IN LINE 217 OF ..\USER\Hardware\direction.c: parameter 1: different from declaration
  218   1        float error;
  219   1        static float last_error = 0;
  220   1        float Output;
  221   1        float error_derivative;
  222   1      
  223   1        error = chazhi;
  224   1      
  225   1        error_derivative = error - last_error;
  226   1      
  227   1        Output = error * dir_p + error_derivative * dir_d + Get_Gyro_Z*10* dir_d2;
  228   1      
  229   1        last_error = error;
  230   1      
  231   1        Output = limit(Output, out_max);
  232   1        return (int)Output;
  233   1      }
  234          
  235          /**
  236           * @brief 控制车行驶的距离
  237           *
  238           * @param L_Distanc
  239           * @param R_Distance
  240           */
  241          int Car_Distance(int Distance)
  242          {
  243   1        static int bmq_jifen, flag = 1;
  244   1        bmq_jifen += (L_Pulse + R_Pulse) * 0.5;
  245   1        if (bmq_jifen <= Distance)
  246   1        {
  247   2          // LSpeed_pid_Out(20, L_Pulse);
  248   2          // RSpeed_pid_Out(20, R_Pulse);
C251 COMPILER V5.60.0,  direction                                                          28/05/24  12:17:14  PAGE 5   

  249   2          //Motor_PWM(LSpeed_pid_Out(20, L_Pulse), RSpeed_pid_Out(20, R_Pulse));
  250   2        }
  251   1        else if (bmq_jifen > Distance)
  252   1        {
  253   2          if (Angle_Ring(90, 25, 1) == 1)
  254   2          {
  255   3            bmq_jifen = 0;
  256   3            L_Pulse = 0;
  257   3            R_Pulse = 0;
  258   3            gyro_z3 = 0;
  259   3          }
  260   2          return 1;
  261   2        }
  262   1      }
*** WARNING C180 IN LINE 261 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value
*** WARNING C180 IN LINE 261 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1285     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       292     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       172     ------
End of Module Information.


C251 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
