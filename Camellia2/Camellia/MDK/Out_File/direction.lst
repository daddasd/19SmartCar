C251 COMPILER V5.60.0,  direction                                                          17/05/24  20:59:59  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE direction
OBJECT MODULE PLACED IN .\Out_File\direction.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\direction.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED
                    -) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE
                    -;..\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\direction.lst) TABS(2) OBJECT(.\Out_F
                    -ile\direction.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 21:24:19
    5           * @LastEditTime: 2024-01-19 11:52:20
    6           * @LastEditors: Yzhi
    7           */
    8          #include "myconfig.h"
    9          
   10          #define out_max 20000
   11          #define Angle_MAX 3500
   12          
   13          float Nh_P = 180;  // 0.5
   14          float Nh_D = 1.9; // 4.1
   15          float Wh_P = 5.7;
   16          float Wh_D = 10;
   17          float gyro_z3 = 0;
   18          
   19          int Speed_Ring_Flag = 0;
   20          
   21          /**
   22           * @brief 外环
   23           * 
   24           * @param chazhi 电感差值PD控制
   25           * @param dir_p  KP
   26           * @param dir_d  KD
   27           * @return int   外环返回值
   28           */
   29          
   30          int wh_Turn_Out(int16 chazhi, float dir_p, float dir_d)
   31          {
   32   1        float error;
   33   1        static float last_error = 0;
   34   1        float Output;
   35   1        float error_derivative;
   36   1      
   37   1        error = chazhi;
   38   1      
   39   1        error_derivative = error - last_error;
   40   1      
   41   1        Output = error * dir_p + error_derivative * dir_d;
   42   1      
   43   1        last_error = error;
   44   1      
   45   1        Output = limit(Output, out_max);
   46   1        return (int)Output;
   47   1      }
   48          
   49          /**
   50           * @brief 内环角速度PI控制
   51           * 
   52           * @param err   外环输入值
   53           * @param dir_p 
   54           * @param dir_i 
   55           * @return int  
   56           */
C251 COMPILER V5.60.0,  direction                                                          17/05/24  20:59:59  PAGE 2   

   57          int nh_Turn_Out(int err, float dir_p, float dir_i)
   58          {
   59   1        int error1 = 0;
   60   1        static int last_err = 0, P_out = 0, I_out = 0, out = 0;
   61   1        error1 = (int)(err + mpu6050_gyro_z / 65.6);
   62   1        P_out = dir_p * (error1 - last_err);
   63   1        I_out = dir_i * error1;
   64   1        if (I_out >= 2000)
   65   1          I_out = 2000;
   66   1        else if (I_out <= -2000)
   67   1          I_out = -2000;
   68   1        last_err = error1;
   69   1        out += P_out + I_out;
   70   1        out=limit(out, 25000);
   71   1        return out;
   72   1      }
   73          
   74          /**
   75           * @brief 方向环，串级PID给电机
   76           * 
   77           * @return int 
   78           */
   79          int DirControl(void)
   80          {
   81   1        static int count = 0;
   82   1        static int wh_out = 0;
   83   1        if (count == 3)
   84   1        {
   85   2          wh_out = wh_Turn_Out(Inductance_Error, Wh_P, Wh_D);
   86   2          count = 0;
   87   2        }
   88   1        count++;
   89   1        return (int)nh_Turn_Out(wh_out, Nh_P, Nh_D);
   90   1      }
   91          
   92          /**
   93           * @brief 角度环
   94           * 
   95           * @param target 目标角度
   96           * @param p 
   97           * @param d 
   98           * @return int 
   99           */
  100          int Angle_Ring(double target, float p, float d)
  101          {
  102   1        float error;
  103   1        static float last_error = 0, Ki_val = 0;
  104   1        int Output, Angle_Speed;
  105   1        float error_derivative;
  106   1        gyro_z3 += ((mpu6050_gyro_z) * 0.000121 - 0.001);
  107   1      
  108   1      }
*** WARNING C47 IN LINE 100 OF ..\USER\Hardware\direction.c: 'target': unreferenced parameter
*** WARNING C47 IN LINE 100 OF ..\USER\Hardware\direction.c: 'p': unreferenced parameter
*** WARNING C47 IN LINE 100 OF ..\USER\Hardware\direction.c: 'd': unreferenced parameter
*** WARNING C47 IN LINE 102 OF ..\USER\Hardware\direction.c: 'error': unreferenced local variable
*** WARNING C47 IN LINE 104 OF ..\USER\Hardware\direction.c: 'Output': unreferenced local variable
*** WARNING C47 IN LINE 104 OF ..\USER\Hardware\direction.c: 'Angle_Speed': unreferenced local variable
*** WARNING C47 IN LINE 105 OF ..\USER\Hardware\direction.c: 'error_derivative': unreferenced local variable
  109          /**
  110           * @brief 角度环2
  111           * 
  112           * @param target 目标角度
  113           * @param p 
  114           * @param d 
  115           * @return int 
C251 COMPILER V5.60.0,  direction                                                          17/05/24  20:59:59  PAGE 3   

  116           */
  117          int Angle_Ring1(double target, float p, float d)
  118          {
  119   1        float error;
  120   1        int Output, Angle_Speed;
  121   1        static float last_error,error2;
  122   1        gyro_z3 += ((mpu6050_gyro_z) * 0.000121 - 0.00015);
  123   1        error = target - gyro_z3;
  124   1        error2 = error - last_error;
  125   1        last_error = error;
  126   1        Output = (int)(error * p + error2 * d);
  127   1        Output=limit(Output, 1000);
  128   1        Angle_Speed_Ring(Output, 160, 1.85);
  129   1      }
*** WARNING C47 IN LINE 120 OF ..\USER\Hardware\direction.c: 'Angle_Speed': unreferenced local variable
  130          
  131          /**
  132           * @brief 角速度环
  133           * 
  134           * @param err 
  135           * @param dir_p 
  136           * @param dir_i 
  137           * @return int 
  138           */
  139          int Angle_Speed_Ring(int err, float dir_p, float dir_i)
  140          {
  141   1        int error1 = 0;
  142   1        static float last_err = 0, nh_out = 0, P_out = 0, I_out = 0, out = 0;
  143   1        error1 = err - mpu6050_gyro_z / 65.6;
  144   1        P_out = dir_p * (error1 - last_err);
  145   1        I_out = dir_i * error1;
  146   1        if (I_out > 2000)
  147   1          I_out = 2000;
  148   1        if (I_out < -2000)
  149   1          I_out = -2000;
  150   1        out = P_out + I_out;
  151   1        nh_out += out;
  152   1        last_err = error1;
  153   1        nh_out = limit(nh_out, 25000);
  154   1        Motor_PWM(nh_out, -nh_out);
  155   1      }
  156          
  157          
  158          int DirControl_2(int16 chazhi, float dir_p, float dir_d, float dir_d2)
  159          {
*** WARNING C57 IN LINE 159 OF ..\USER\Hardware\direction.c: parameter 1: different from declaration
  160   1        float error;
  161   1        static float last_error = 0;
  162   1        float Output;
  163   1        float error_derivative;
  164   1      
  165   1        error = chazhi;
  166   1      
  167   1        error_derivative = error - last_error;
  168   1      
  169   1        Output = error * dir_p + error_derivative * dir_d + mpu6050_gyro_z * dir_d2;
  170   1      
  171   1        last_error = error;
  172   1      
  173   1        Output = limit(Output, out_max);
  174   1        return (int)Output;
  175   1      }
  176          
  177          /**
  178           * @brief 控制车行驶的距离
  179           * 
C251 COMPILER V5.60.0,  direction                                                          17/05/24  20:59:59  PAGE 4   

  180           * @param L_Distanc 
  181           * @param R_Distance 
  182           */
  183          int Car_Distance(int Distance)
  184          {
  185   1        static int bmq_jifen,flag =1;
  186   1        bmq_jifen += (L_Pulse + R_Pulse) * 0.5;
  187   1        if (bmq_jifen<=Distance)
  188   1        {
  189   2          //LSpeed_pid_Out(20, L_Pulse);
  190   2          //RSpeed_pid_Out(20, R_Pulse);
  191   2          Motor_PWM(LSpeed_pid_Out(20, L_Pulse), RSpeed_pid_Out(20, R_Pulse));
  192   2        }
  193   1        else if(bmq_jifen >Distance)
  194   1        {
  195   2          if(Angle_Ring(90, 25, 1)==1)
  196   2          {
  197   3            bmq_jifen = 0;
  198   3            L_Pulse = 0;
  199   3            R_Pulse=0;
  200   3            gyro_z3 = 0;
  201   3          }
  202   2          return 1;
  203   2        }
  204   1      }
*** WARNING C135 IN LINE 108 OF ..\USER\Hardware\direction.c: 'Angle_Ring': no return value
*** WARNING C135 IN LINE 108 OF ..\USER\Hardware\direction.c: 'Angle_Ring': no return value
*** WARNING C135 IN LINE 129 OF ..\USER\Hardware\direction.c: 'Angle_Ring1': no return value
*** WARNING C135 IN LINE 129 OF ..\USER\Hardware\direction.c: 'Angle_Ring1': no return value
*** WARNING C135 IN LINE 155 OF ..\USER\Hardware\direction.c: 'Angle_Speed_Ring': no return value
*** WARNING C135 IN LINE 155 OF ..\USER\Hardware\direction.c: 'Angle_Speed_Ring': no return value
*** WARNING C180 IN LINE 203 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value
*** WARNING C180 IN LINE 203 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1128     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       178     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       160     ------
End of Module Information.


C251 COMPILATION COMPLETE.  17 WARNING(S),  0 ERROR(S)
