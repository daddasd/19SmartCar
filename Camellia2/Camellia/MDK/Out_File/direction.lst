C251 COMPILER V5.60.0,  direction                                                          18/05/24  19:34:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE direction
OBJECT MODULE PLACED IN .\Out_File\direction.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\direction.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED
                    -) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE
                    -;..\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\direction.lst) TABS(2) OBJECT(.\Out_F
                    -ile\direction.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 21:24:19
    5           * @LastEditTime: 2024-01-19 11:52:20
    6           * @LastEditors: Yzhi
    7           */
    8          #include "myconfig.h"
    9          
   10          #define out_max 20000
   11          #define Angle_MAX 3500
   12          
   13          float Nh_P = 180;  // 0.5
   14          float Nh_D = 1.9; // 4.1
   15          float Wh_P = 1.7;
   16          float Wh_D = 8.5;
   17          float gyro_z3 = 0;
   18          
   19          int Speed_Ring_Flag = 0;
   20          
   21          /**
   22           * @brief 外环
   23           * 
   24           * @param chazhi 电感差值PD控制
   25           * @param dir_p  KP
   26           * @param dir_d  KD
   27           * @return int   外环返回值
   28           */
   29          
   30          int wh_Turn_Out(int16 chazhi, float dir_p, float dir_d)
   31          {
   32   1        float error;
   33   1        static float last_error = 0;
   34   1        float Output;
   35   1        float error_derivative;
   36   1      
   37   1        error = chazhi;
   38   1      
   39   1        error_derivative = error - last_error;
   40   1      
   41   1        Output = error * dir_p + error_derivative * dir_d;
   42   1      
   43   1        last_error = error;
   44   1      
   45   1        Output = limit(Output, out_max);
   46   1        return (int)Output;
   47   1      }
   48          
   49          /**
   50           * @brief 内环角速度PI控制
   51           * 
   52           * @param err   外环输入值
   53           * @param dir_p 
   54           * @param dir_i 
   55           * @return int  
   56           */
C251 COMPILER V5.60.0,  direction                                                          18/05/24  19:34:38  PAGE 2   

   57          int nh_Turn_Out(int err, float dir_p, float dir_i)
   58          {
   59   1        int error1 = 0;
   60   1        static int last_err = 0, P_out = 0, I_out = 0, out = 0;
   61   1        error1 = (int)(err + mpu6050_gyro_z / 65.6);
   62   1        P_out = dir_p * (error1 - last_err);
   63   1        I_out = dir_i * error1;
   64   1        if (I_out >= 2000)
   65   1          I_out = 2000;
   66   1        else if (I_out <= -2000)
   67   1          I_out = -2000;
   68   1        last_err = error1;
   69   1        out += P_out + I_out;
   70   1        out=limit(out, 25000);
   71   1        return out;
   72   1      }
   73          
   74          /**
   75           * @brief 方向环，串级PID给电机
   76           * 
   77           * @return int 
   78           */
   79          int DirControl(void)
   80          {
   81   1        static int count = 0;
   82   1        static int wh_out = 0;
   83   1        int nh_out = 0;
   84   1        if (count == 3)
   85   1        {
   86   2          wh_out = wh_Turn_Out(Inductance_Error, Wh_P, Wh_D);
   87   2          count = 0;
   88   2        }
   89   1        count++;
   90   1        return (int)nh_Turn_Out(wh_out, Nh_P, Nh_D);
   91   1      }
   92          
   93          /**
   94           * @brief 角度环
   95           * 
   96           * @param target 目标角度
   97           * @param p 
   98           * @param d 
   99           * @return int 
  100           */
  101          int Angle_Ring(double target, float p, float d)
  102          {
  103   1        float error;
  104   1        static float last_error = 0, Ki_val = 0;
  105   1        int Output, Angle_Speed;
  106   1        float error_derivative;
  107   1        gyro_z3 += ((mpu6050_gyro_z) * 0.000121 - 0.001);
  108   1      
  109   1      }
*** WARNING C47 IN LINE 101 OF ..\USER\Hardware\direction.c: 'target': unreferenced parameter
*** WARNING C47 IN LINE 101 OF ..\USER\Hardware\direction.c: 'p': unreferenced parameter
*** WARNING C47 IN LINE 101 OF ..\USER\Hardware\direction.c: 'd': unreferenced parameter
*** WARNING C47 IN LINE 103 OF ..\USER\Hardware\direction.c: 'error': unreferenced local variable
*** WARNING C47 IN LINE 105 OF ..\USER\Hardware\direction.c: 'Output': unreferenced local variable
*** WARNING C47 IN LINE 105 OF ..\USER\Hardware\direction.c: 'Angle_Speed': unreferenced local variable
*** WARNING C47 IN LINE 106 OF ..\USER\Hardware\direction.c: 'error_derivative': unreferenced local variable
  110          /**
  111           * @brief 角度环2
  112           * 
  113           * @param target 目标角度
  114           * @param p 
  115           * @param d 
C251 COMPILER V5.60.0,  direction                                                          18/05/24  19:34:38  PAGE 3   

  116           * @return int 
  117           */
  118          int Angle_Ring1(double target, float p, float d)
  119          {
  120   1        float error;
  121   1        int Output, Angle_Speed;
  122   1        static float last_error,error2;
  123   1        gyro_z3 += ((mpu6050_gyro_z) * 0.000121 - 0.00015);
  124   1        error = target - gyro_z3;
  125   1        error2 = error - last_error;
  126   1        last_error = error;
  127   1        Output = (int)(error * p + error2 * d);
  128   1        Output=limit(Output, 1000);
  129   1        Angle_Speed_Ring(Output, 160, 1.85);
  130   1      }
*** WARNING C47 IN LINE 121 OF ..\USER\Hardware\direction.c: 'Angle_Speed': unreferenced local variable
  131          
  132          /**
  133           * @brief 角速度环
  134           * 
  135           * @param err 
  136           * @param dir_p 
  137           * @param dir_i 
  138           * @return int 
  139           */
  140          int Angle_Speed_Ring(int err, float dir_p, float dir_i)
  141          {
  142   1        int error1 = 0;
  143   1        static float last_err = 0, nh_out = 0, P_out = 0, I_out = 0, out = 0;
  144   1        error1 = err - mpu6050_gyro_z / 65.6;
  145   1        P_out = dir_p * (error1 - last_err);
  146   1        I_out = dir_i * error1;
  147   1        if (I_out > 2000)
  148   1          I_out = 2000;
  149   1        if (I_out < -2000)
  150   1          I_out = -2000;
  151   1        out = P_out + I_out;
  152   1        nh_out += out;
  153   1        last_err = error1;
  154   1        nh_out = limit(nh_out, 25000);
  155   1        Motor_PWM(nh_out, -nh_out);
  156   1      }
  157          
  158          
  159          int DirControl_2(int16 chazhi, float dir_p, float dir_d, float dir_d2)
  160          {
*** WARNING C57 IN LINE 160 OF ..\USER\Hardware\direction.c: parameter 1: different from declaration
  161   1        float error;
  162   1        static float last_error = 0;
  163   1        float Output;
  164   1        float error_derivative;
  165   1      
  166   1        error = chazhi;
  167   1      
  168   1        error_derivative = error - last_error;
  169   1      
  170   1        Output = error * dir_p + error_derivative * dir_d + mpu6050_gyro_z * dir_d2;
  171   1      
  172   1        last_error = error;
  173   1      
  174   1        Output = limit(Output, out_max);
  175   1        return (int)Output;
  176   1      }
  177          
  178          /**
  179           * @brief 控制车行驶的距离
C251 COMPILER V5.60.0,  direction                                                          18/05/24  19:34:38  PAGE 4   

  180           * 
  181           * @param L_Distanc 
  182           * @param R_Distance 
  183           */
  184          int Car_Distance(int Distance)
  185          {
  186   1        static int bmq_jifen,flag =1;
  187   1        bmq_jifen += (L_Pulse + R_Pulse) * 0.5;
  188   1        if (bmq_jifen<=Distance)
  189   1        {
  190   2          //LSpeed_pid_Out(20, L_Pulse);
  191   2          //RSpeed_pid_Out(20, R_Pulse);
  192   2          Motor_PWM(LSpeed_pid_Out(20, L_Pulse), RSpeed_pid_Out(20, R_Pulse));
  193   2        }
  194   1        else if(bmq_jifen >Distance)
  195   1        {
  196   2          if(Angle_Ring(90, 25, 1)==1)
  197   2          {
  198   3            bmq_jifen = 0;
  199   3            L_Pulse = 0;
  200   3            R_Pulse=0;
  201   3            gyro_z3 = 0;
  202   3          }
  203   2          return 1;
  204   2        }
  205   1      }
*** WARNING C135 IN LINE 109 OF ..\USER\Hardware\direction.c: 'Angle_Ring': no return value
*** WARNING C135 IN LINE 109 OF ..\USER\Hardware\direction.c: 'Angle_Ring': no return value
*** WARNING C135 IN LINE 130 OF ..\USER\Hardware\direction.c: 'Angle_Ring1': no return value
*** WARNING C135 IN LINE 130 OF ..\USER\Hardware\direction.c: 'Angle_Ring1': no return value
*** WARNING C135 IN LINE 156 OF ..\USER\Hardware\direction.c: 'Angle_Speed_Ring': no return value
*** WARNING C135 IN LINE 156 OF ..\USER\Hardware\direction.c: 'Angle_Speed_Ring': no return value
*** WARNING C180 IN LINE 204 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value
*** WARNING C180 IN LINE 204 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1134     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       180     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       160     ------
End of Module Information.


C251 COMPILATION COMPLETE.  17 WARNING(S),  0 ERROR(S)
