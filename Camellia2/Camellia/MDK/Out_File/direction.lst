C251 COMPILER V5.60.0,  direction                                                          28/05/24  19:59:59  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE direction
OBJECT MODULE PLACED IN .\Out_File\direction.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\direction.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED
                    -) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE
                    -;..\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\direction.lst) TABS(2) OBJECT(.\Out_F
                    -ile\direction.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 21:24:19
    5           * @LastEditTime: 2024-01-19 11:52:20
    6           * @LastEditors: Yzhi
    7           */
    8          #include "myconfig.h"
    9          
   10          #define out_max 20000
   11          #define Angle_MAX 3500
   12          
   13          
   14          
   15          float Nh_P = 80;  // 0.5
   16          float Nh_D = 2.5; // 4.1
   17          float Wh_P = 1.3;
   18          float KP2 =  0.2;
   19          float Wh_D = 0;
   20          float gyro_z3 = 0;
   21          
   22          float KP1 = 35;
   23          float KP3 = 0; 
   24          float KD1 = 0;
   25          float KD2 = 0;
   26          float Feedforward_gain = 0;
   27          
   28          
   29          float Angle_Speed_P = 415;
   30          float Angle_Speed_I = 9.2;
   31          
   32          float Target_Vel_Z_pre = 0;
   33          int Speed_Ring_Flag = 0;
   34          
   35          Position_PID_InitTypedef Position;
   36          
   37          /**
   38           * @brief 外环
   39           *
   40           * @param chazhi 电感差值PD控制
   41           * @param dir_p  KP
   42           * @param dir_d  KD
   43           * @return int   外环返回值
   44           */
   45          
   46          float wh_Turn_Out(int16 chazhi, float dir_p, float dir_d)
   47          {
   48   1        float error;
   49   1        static float last_error = 0;
   50   1        float Output;
   51   1        float error_derivative;
   52   1      
   53   1        error = chazhi;
   54   1      
   55   1        error_derivative = error - last_error;
   56   1      
C251 COMPILER V5.60.0,  direction                                                          28/05/24  19:59:59  PAGE 2   

   57   1        Output = error * dir_p+error*(error)*KP2 + error_derivative * dir_d;
   58   1      
   59   1        last_error = error;
   60   1      
   61   1        Target_Vel_Z_pre = Output;
   62   1      
   63   1        return Output;
   64   1      }
   65          
   66          /**
   67           * @brief 内环角速度PI控制
   68           *
   69           * @param err   外环输入值
   70           * @param dir_p
   71           * @param dir_i
   72           * @return int
   73           */
   74          int16 nh_Turn_Out(float err, float dir_p, float dir_d)
   75          {
   76   1        float error;
   77   1        static float last_error = 0;
   78   1        float Output;
   79   1        float error_derivative;
   80   1        static float I = 0;
   81   1        error = err + mpu6050_gyro_z/65.6;
   82   1        I += error * dir_d;
   83   1        if(I>2500)
   84   1          I = 2500;
   85   1        else if(I<-2500)
   86   1          I = -2500;
   87   1        error_derivative = error - last_error;
   88   1      
   89   1        Output = (int)(error * dir_p + I);
   90   1      
   91   1        last_error = error;
   92   1      
   93   1        Output = limit(Output, out_max);
   94   1        return (int)Output+mpu6050_gyro_z*1.3;
   95   1      }
   96          
   97          /**
   98           * @brief 方向环，串级PID给电机
   99           *
  100           * @return int
  101           */
  102          
  103          void Dir_PID_Init(void)
  104          {
  105   1        Position.kP1 = KP1;
  106   1        Position.kP2 = KP3;
  107   1        Position.kP3 = KP2;
  108   1        Position.kD  = KD1;
  109   1        Position.kD2 = KD2;
  110   1        Position.feedforward_gain = Feedforward_gain;
  111   1      }
  112          
  113          int16 DirControl(int err)
  114          {
  115   1        static int count = 0;
  116   1        static int wh_out = 0;
  117   1        if (count == 3)
  118   1        {
  119   2          wh_out = wh_Turn_Out(err, Wh_P, Wh_D);
  120   2          count = 0;
  121   2        }
  122   1        count++;
C251 COMPILER V5.60.0,  direction                                                          28/05/24  19:59:59  PAGE 3   

  123   1        return (int)nh_Turn_Out(wh_out, Nh_P, Nh_D) * count / 3;
  124   1      }
  125          
  126          //K1 适合直道   K2适合弯中的姿态(内切)
  127          // int16 DirControl(int error)
  128          // {
  129          //   Position.err = error;
  130          //   Position.KP_Val = (int16)(Position.kP1 * Position.err + Position.kP2 * Position.err * Position.err *
             - Position.err);
  131          //   Position.kD_Val = (int16)(Position.kD*mpu6050_gyro_z);
  132          //   Position.kD2_Val = (int16)(Position.kD2 * (Position.err - Position.err_last));
  133          //   Position.err_last = Position.err;
  134          //   Position.feedforward_Val = Position.feedforward_gain * error;
  135          //   Position.Out = Position.KP_Val + Position.kD_Val + Position.feedforward_Val + Position.kD2_Val;
  136          //   return (int16)Position.Out;
  137          // }
  138          
  139          
  140          
  141          // int DirControl(void)
  142          // {
  143          //   int error = 0;
  144          //   static int last_error;
  145          //   int out = 0;
  146          //   error = Inductance_Error;
  147          //   out = error * KP1 + error * asb(error) * KP2 + (error - last_error) * KD1 - imu660ra_gyro_z / 65.6 *
             - KD1;
  148          //   last_error = error;
  149          //   return out;
  150          // }
  151          
  152          /**
  153           * @brief 角度环
  154           *
  155           * @param target 目标角度
  156           * @param p
  157           * @param d
  158           * @return int
  159           */
  160          int Angle_Ring(double target, float p, float d)
  161          {
  162   1        float error;
  163   1        int Output, Angle_Speed;
  164   1        static float last_error, error2;
  165   1        gyro_z3 += Get_Gyro_Z;
  166   1        error = target - gyro_z3;
  167   1        error2 = error - last_error;
  168   1        last_error = error;
  169   1        Output = (int)(error * p + error2 * d);
  170   1        Output = limit(Output, 1000);
  171   1        Angle_Speed_Ring(Output, Angle_Speed_P, Angle_Speed_I);
  172   1        if (abs(error) <= 2) // 如何小于指定角度，表示角度ok
  173   1        {
  174   2          gyro_z3 = 0; // 角度积分清零
  175   2          last_error = 0;
  176   2          error2 = 0;
  177   2          return 1;
  178   2        }
  179   1        else
  180   1          return 0;
  181   1      }
*** WARNING C47 IN LINE 163 OF ..\USER\Hardware\direction.c: 'Angle_Speed': unreferenced local variable
  182          
  183          /**
  184           * @brief 角速度环
  185           *
C251 COMPILER V5.60.0,  direction                                                          28/05/24  19:59:59  PAGE 4   

  186           * @param err
  187           * @param dir_p
  188           * @param dir_i
  189           * @return int
  190           */
  191          int Angle_Speed_Ring(int err, float dir_p, float dir_i)
  192          {
  193   1        int error1 = 0;
  194   1        static float last_err = 0, nh_out = 0, P_out = 0, I_out = 0, out = 0;
  195   1        error1 = err - Get_Gyro_Z*10;
  196   1        P_out = dir_p * (error1 - last_err);
  197   1        I_out = dir_i * error1;
  198   1        if (I_out > 2000)
  199   1          I_out = 2000;
  200   1        if (I_out < -2000)
  201   1          I_out = -2000;
  202   1        out = P_out + I_out;
  203   1        nh_out += out;
  204   1        last_err = error1;
  205   1        nh_out = limit(nh_out, 9500);
  206   1        Motor_PWM(-nh_out, nh_out);
  207   1        return nh_out;
  208   1      }
  209          
  210          int DirControl_2(int16 chazhi, float dir_p, float dir_d, float dir_d2)
  211          {
*** WARNING C57 IN LINE 211 OF ..\USER\Hardware\direction.c: parameter 1: different from declaration
  212   1        float error;
  213   1        static float last_error = 0;
  214   1        float Output;
  215   1        float error_derivative;
  216   1      
  217   1        error = chazhi;
  218   1      
  219   1        error_derivative = error - last_error;
  220   1      
  221   1        Output = error * dir_p + error_derivative * dir_d + Get_Gyro_Z*10* dir_d2;
  222   1      
  223   1        last_error = error;
  224   1      
  225   1        Output = limit(Output, out_max);
  226   1        return (int)Output;
  227   1      }
  228          
  229          /**
  230           * @brief 控制车行驶的距离
  231           *
  232           * @param L_Distanc
  233           * @param R_Distance
  234           */
  235          int Car_Distance(int Distance)
  236          {
  237   1        static int bmq_jifen, flag = 1;
  238   1        bmq_jifen += (L_Pulse + R_Pulse) * 0.5;
  239   1        if (bmq_jifen <= Distance)
  240   1        {
  241   2          // LSpeed_pid_Out(20, L_Pulse);
  242   2          // RSpeed_pid_Out(20, R_Pulse);
  243   2          //Motor_PWM(LSpeed_pid_Out(20, L_Pulse), RSpeed_pid_Out(20, R_Pulse));
  244   2        }
  245   1        else if (bmq_jifen > Distance)
  246   1        {
  247   2          if (Angle_Ring(90, 25, 1) == 1)
  248   2          {
  249   3            bmq_jifen = 0;
  250   3            L_Pulse = 0;
C251 COMPILER V5.60.0,  direction                                                          28/05/24  19:59:59  PAGE 5   

  251   3            R_Pulse = 0;
  252   3            gyro_z3 = 0;
  253   3          }
  254   2          return 1;
  255   2        }
  256   1      }
*** WARNING C180 IN LINE 255 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value
*** WARNING C180 IN LINE 255 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1253     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       284     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       208     ------
End of Module Information.


C251 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
