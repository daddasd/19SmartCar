C251 COMPILER V5.60.0,  direction                                                          22/07/24  21:09:22  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE direction
OBJECT MODULE PLACED IN .\Out_File\direction.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\direction.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED
                    -) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE
                    -;..\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\direction.lst) TABS(2) OBJECT(.\Out_F
                    -ile\direction.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 21:24:19
    5           * @LastEditTime: 2024-01-19 11:52:20
    6           * @LastEditors: Yzhi
    7           */
    8          #include "myconfig.h"
    9          
   10          #define out_max 5000
   11          #define Angle_MAX 3500
   12          
   13          
   14          
   15          // float Nh_P = 9000; //增量式参数
   16          // float Nh_D = 800;
   17          
   18          float Nh_P = 280; //位置式参数
   19          float Nh_D = 180;
   20          
   21          float Wh_P = 0.85;
   22          float Wh_D = 1.2;
   23          float KP1 = 0;
   24          float KP2 = 0;
   25          float gyro_z3 = 0;
   26          
   27          float KP3 = 0;
   28          float KD1 = 0;
   29          float KD2 = 0;
   30          float Feedforward_gain = 0;
   31          
   32          float Angle_Speed_P = 3;
   33          float Angle_Speed_D = 2.5;
   34          
   35          
   36          
   37          float Angle_P = 180;
   38          float Angle_D = 90;
   39          
   40          float Target_Vel_Z_pre = 0;
   41          int Speed_Ring_Flag = 0;
   42          
   43          Position_PID_InitTypedef Position;
   44          
   45          /**
   46           * @brief 外环
   47           *
   48           * @param chazhi 电感差值PD控制
   49           * @param dir_p  KP
   50           * @param dir_d  KD
   51           * @return int   外环返回值
   52           */
   53          
   54          int32 wh_Turn_Out(int16 chazhi, float dir_p, float dir_d)
   55          {
   56   1        float error;
C251 COMPILER V5.60.0,  direction                                                          22/07/24  21:09:22  PAGE 2   

   57   1        static float last_error = 0,Angle_speed=0;
   58   1        float Output, KP2_OUT;
   59   1        float error_derivative;
   60   1      
   61   1        error = chazhi;
   62   1      
   63   1        error_derivative = error - last_error;
   64   1        Output = error *dir_p + error_derivative * dir_d;
   65   1        last_error = error;
   66   1        //Output = limit(Output, out_max);
   67   1      
   68   1      
   69   1        return Output;
   70   1      }
*** WARNING C47 IN LINE 58 OF ..\USER\Hardware\direction.c: 'KP2_OUT': unreferenced local variable
   71          
   72          /**
   73           * @brief 内环角速度PI控制
   74           *
   75           * @param err   外环输入值
   76           * @param dir_p
   77           * @param dir_i
   78           * @return int
   79           */
   80          int16 nh_Turn_Out(float err, float dir_p, float dir_d)
   81          {
   82   1        double error1 = 0;
   83   1        static double last_err = 0, P_out = 0, I_out = 0, out = 0,D_out;
   84   1      
   85   1        error1 = err - mpu6050_gyro_z/65.6;
   86   1      
   87   1        P_out = error1 * dir_p;
   88   1        D_out = (error1 - last_err) * dir_d;
   89   1      
   90   1        last_err = error1;
   91   1      
   92   1        out = P_out + D_out;
   93   1      
   94   1       out = limit(out, 10000);
   95   1      
   96   1        // if(Inductance_Error<50&&Inductance_Error>-50&&L2_NOR_ADC<10&&R2_NOR_ADC<10)
   97   1        // {
   98   1        //   if (out > 2000)
   99   1        //     out = 2000;
  100   1        //   else if (out < -2000)
  101   1        //     out = -2000;
  102   1        // }
  103   1        // if (abs(Inductance_Error) < 80 &&abs(Inductance_Error)>=60 && L2_NOR_ADC < 10 && R2_NOR_ADC < 10)
  104   1        // {
  105   1        //   if (out > 4500)
  106   1        //     out = 2500;
  107   1        //   else if (out < -4500)
  108   1        //     out = -4500;
  109   1        // }
  110   1          return (int16)out;
  111   1      }
  112          
  113          /**
  114           * @brief 方向环，串级PID给电机
  115           *
  116           * @return int
  117           */
  118          
  119          void Dir_PID_Init(void)
  120          {
  121   1        Position.kP1 = KP1;
C251 COMPILER V5.60.0,  direction                                                          22/07/24  21:09:22  PAGE 3   

  122   1        Position.kP2 = KP3;
  123   1        Position.kP3 = KP2;
  124   1        Position.kD = KD1;
  125   1        Position.kD2 = KD2;
  126   1        Position.feedforward_gain = Feedforward_gain;
  127   1      }
  128          
  129          int16 DirControl(int err)
  130          {
  131   1        static int count = 0;
  132   1        static int32 wh_out = 0;
  133   1        if (count == 3)
  134   1        {
  135   2          wh_out = wh_Turn_Out(err, Wh_P, Wh_D);
  136   2          count = 0;
  137   2        }
  138   1        count++;
  139   1        return (int16)nh_Turn_Out(wh_out, Nh_P, Nh_D);
  140   1      }
  141          
  142          int Turn_Angle(float Angle, float Actual)
  143          {
  144   1        static int count = 0;
  145   1        static int whout = 0;
  146   1        count++;
  147   1        if (count == 3)
  148   1        {
  149   2          whout = Angle_Ring(Angle, Actual);
  150   2          count = 0;
  151   2        }
  152   1        return (int16)Angle_Speed_Ring(whout);
  153   1      }
  154          
  155          int Angle_Ring(float Angle, float Actual)
  156          {
  157   1        float error = 0;
  158   1        float out, out1;
  159   1        static float last_error;
  160   1        static int count = 0;
  161   1        error = Angle - Actual;
  162   1      
  163   1        out1 = error * Angle_P + (error - last_error) * Angle_D;
  164   1      
  165   1        last_error = error;
  166   1      
  167   1        out = Angle_Speed_Ring(out1);
  168   1        out = limit(out, 8500);
  169   1      
  170   1        if(error<0.1&&error>-0.1)
  171   1          out = 0;
  172   1        return out;
  173   1      }
  174          
  175          int16 Angle_Speed_Ring(float err)
  176          {
  177   1        double error1 = 0;
  178   1        static double last_err = 0, P_out = 0, I_out = 0, out = 0, last_GRYO_Z, D_out;
  179   1      
  180   1        last_GRYO_Z = mpu6050_gyro_z;
  181   1        mpu6050_gyro_z *= 0.8;
  182   1        mpu6050_gyro_z += last_GRYO_Z * 0.2;
  183   1      
  184   1        error1 = err - mpu6050_gyro_z;
  185   1      
  186   1        P_out = error1 * Angle_Speed_P;
  187   1        D_out = (error1 - last_err) * Angle_Speed_D;
C251 COMPILER V5.60.0,  direction                                                          22/07/24  21:09:22  PAGE 4   

  188   1      
  189   1        last_err = error1;
  190   1      
  191   1        out = P_out + D_out;
  192   1      
  193   1        if (out > 10000)
  194   1          out = 10000;
  195   1        else if (out < -10000)
  196   1          out = -10000;
  197   1        return (int16)out;
  198   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       814     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       278     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       246     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
