C251 COMPILER V5.60.0,  direction                                                          24/05/24  22:11:36  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE direction
OBJECT MODULE PLACED IN .\Out_File\direction.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\direction.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED
                    -) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE
                    -;..\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\direction.lst) TABS(2) OBJECT(.\Out_F
                    -ile\direction.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 21:24:19
    5           * @LastEditTime: 2024-01-19 11:52:20
    6           * @LastEditors: Yzhi
    7           */
    8          #include "myconfig.h"
    9          
   10          #define out_max 20000
   11          #define Angle_MAX 3500
   12          
   13          float Nh_P = 245; // 0.5
   14          float Nh_D = 6.5; // 4.1
   15          float Wh_P = 0.19;
   16          float Wh_D = 0.06;
   17          float gyro_z3 = 0;
   18          
   19          float Angle_Speed_P = 385;
   20          float Angle_Speed_I = 8.7;
   21          
   22          
   23          
   24          int Speed_Ring_Flag = 0;
   25          
   26          /**
   27           * @brief 外环
   28           *
   29           * @param chazhi 电感差值PD控制
   30           * @param dir_p  KP
   31           * @param dir_d  KD
   32           * @return int   外环返回值
   33           */
   34          
   35          int wh_Turn_Out(int16 chazhi, float dir_p, float dir_d)
   36          {
   37   1        float error;
   38   1        static float last_error = 0;
   39   1        float Output;
   40   1        float error_derivative;
   41   1      
   42   1        error = chazhi;
   43   1      
   44   1        error_derivative = error - last_error;
   45   1      
   46   1        Output = error * dir_p + error_derivative * dir_d;
   47   1      
   48   1        last_error = error;
   49   1      
   50   1        Output = limit(Output, out_max);
   51   1        return (int)Output;
   52   1      }
   53          
   54          /**
   55           * @brief 内环角速度PI控制
   56           *
C251 COMPILER V5.60.0,  direction                                                          24/05/24  22:11:36  PAGE 2   

   57           * @param err   外环输入值
   58           * @param dir_p
   59           * @param dir_i
   60           * @return int
   61           */
   62          int nh_Turn_Out(int err, float dir_p, float dir_i)
   63          {
   64   1        float error1 = 0;
   65   1        static float last_err = 0, P_out = 0, I_out = 0, out = 0;
   66   1        error1 = (err - Get_Gyro_Z * 20);
   67   1       // if(error1<0.05&&error1>0.05)
   68   1         // error1 = 0;
   69   1        P_out = dir_p * (error1 - last_err);
   70   1        I_out = dir_i * error1;
   71   1        if (I_out >= 2000)
   72   1          I_out = 2000;
   73   1        else if (I_out <= -2000)
   74   1          I_out = -2000;
   75   1        last_err = error1;
   76   1        out += P_out + I_out;
   77   1        out = limit(out, 9500);
   78   1        return (int)out;
   79   1      }
   80          
   81          /**
   82           * @brief 方向环，串级PID给电机
   83           *
   84           * @return int
   85           */
   86          int DirControl(void)
   87          {
   88   1        static int count = 0;
   89   1        static int wh_out = 0;
   90   1        int nh_out = 0;
   91   1        if (count == 3)
   92   1        {
   93   2          wh_out = wh_Turn_Out(Inductance_Error, Wh_P, Wh_D);
   94   2          count = 0;
   95   2        }
   96   1        count++;
   97   1        return (int)nh_Turn_Out(wh_out, Nh_P, Nh_D);
   98   1      }
   99          
  100          /**
  101           * @brief 角度环
  102           *
  103           * @param target 目标角度
  104           * @param p
  105           * @param d
  106           * @return int
  107           */
  108          int Angle_Ring(double target, float p, float d)
  109          {
  110   1        float error;
  111   1        int Output, Angle_Speed;
  112   1        static float last_error, error2;
  113   1        gyro_z3 += Get_Gyro_Z*0.57;
  114   1        error = target - gyro_z3;
  115   1        error2 = error - last_error;
  116   1        last_error = error;
  117   1        Output = (int)(error * p + error2 * d);
  118   1        Output = limit(Output, 1000);
  119   1        Angle_Speed_Ring(Output, Angle_Speed_P, Angle_Speed_I);
  120   1        return 0;
  121   1      }
*** WARNING C47 IN LINE 111 OF ..\USER\Hardware\direction.c: 'Angle_Speed': unreferenced local variable
C251 COMPILER V5.60.0,  direction                                                          24/05/24  22:11:36  PAGE 3   

  122          
  123          /**
  124           * @brief 角速度环
  125           *
  126           * @param err
  127           * @param dir_p
  128           * @param dir_i
  129           * @return int
  130           */
  131          int Angle_Speed_Ring(int err, float dir_p, float dir_i)
  132          {
  133   1        int error1 = 0;
  134   1        static float last_err = 0, nh_out = 0, P_out = 0, I_out = 0, out = 0;
  135   1        error1 = err - Get_Gyro_Z*20;
  136   1        P_out = dir_p * (error1 - last_err);
  137   1        I_out = dir_i * error1;
  138   1        if (I_out > 2000)
  139   1          I_out = 2000;
  140   1        if (I_out < -2000)
  141   1          I_out = -2000;
  142   1        out = P_out + I_out;
  143   1        nh_out += out;
  144   1        last_err = error1;
  145   1        Motor_PWM(-nh_out, nh_out);
  146   1        return nh_out;
  147   1      }
  148          
  149          int DirControl_2(int16 chazhi, float dir_p, float dir_d, float dir_d2)
  150          {
*** WARNING C57 IN LINE 150 OF ..\USER\Hardware\direction.c: parameter 1: different from declaration
  151   1        float error;
  152   1        static float last_error = 0;
  153   1        float Output;
  154   1        float error_derivative;
  155   1      
  156   1        error = chazhi;
  157   1      
  158   1        error_derivative = error - last_error;
  159   1      
  160   1        Output = error * dir_p + error_derivative * dir_d + Get_Gyro_Z*10* dir_d2;
  161   1      
  162   1        last_error = error;
  163   1      
  164   1        Output = limit(Output, out_max);
  165   1        return (int)Output;
  166   1      }
  167          
  168          /**
  169           * @brief 控制车行驶的距离
  170           *
  171           * @param L_Distanc
  172           * @param R_Distance
  173           */
  174          int Car_Distance(int Distance)
  175          {
  176   1        static int bmq_jifen, flag = 1;
  177   1        bmq_jifen += (L_Pulse + R_Pulse) * 0.5;
  178   1        if (bmq_jifen <= Distance)
  179   1        {
  180   2          // LSpeed_pid_Out(20, L_Pulse);
  181   2          // RSpeed_pid_Out(20, R_Pulse);
  182   2          Motor_PWM(LSpeed_pid_Out(20, L_Pulse), RSpeed_pid_Out(20, R_Pulse));
  183   2        }
  184   1        else if (bmq_jifen > Distance)
  185   1        {
  186   2          if (Angle_Ring(90, 25, 1) == 1)
C251 COMPILER V5.60.0,  direction                                                          24/05/24  22:11:36  PAGE 4   

  187   2          {
  188   3            bmq_jifen = 0;
  189   3            L_Pulse = 0;
  190   3            R_Pulse = 0;
  191   3            gyro_z3 = 0;
  192   3          }
  193   2          return 1;
  194   2        }
  195   1      }
*** WARNING C180 IN LINE 194 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value
*** WARNING C180 IN LINE 194 OF ..\USER\Hardware\direction.c: 'Car_Distance': not every path returns a value


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1158     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       186     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       168     ------
End of Module Information.


C251 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
