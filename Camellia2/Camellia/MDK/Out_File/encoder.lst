C251 COMPILER V5.60.0,  encoder                                                            28/05/24  12:24:03  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE encoder
OBJECT MODULE PLACED IN .\Out_File\encoder.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\encoder.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) 
                    -BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;.
                    -.\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\encoder.lst) TABS(2) OBJECT(.\Out_File\
                    -encoder.obj) 

stmt  level    source

    1          #include "myconfig.h"
    2          
    3          int dir_out = 0, nh_out = 0;
    4          int L_Pulse = 0, R_Pulse = 0, Sum_Pulse = 0;
    5          
    6          int L_Dis = 0;
    7          int R_Dis = 0;
    8          
    9          double angle1 = 0.0;
   10          int speed = 105;
   11          float Ang = 0;
   12          int PWM_Out = 0;
   13          
   14          float L = 0, R = 0;
   15          //--
   16          //  @brief      ???????????
   17          //  @param      void
   18          //  @return     void
   19          //--
   20          
   21          void Encoder_Time_Init(void)
   22          {
   23   1        pit_timer_ms(TIM_4, 2);
   24   1        gpio_mode(Encoder_L, GPI_IMPEDANCE);
   25   1        gpio_mode(Encoder_R, GPI_IMPEDANCE);
   26   1        ctimer_count_init(Encoder_L);
   27   1        ctimer_count_init(Encoder_R);
   28   1        EnableGlobalIRQ(); //???????锟斤拷?
   29   1      }
   30          
   31          //--
   32          //  @brief      ??????????????
   33          //  @param      void
   34          //  @return     return : ?????
   35          //--
   36          
   37          int L_Encoder_Pulse(void)
   38          {
   39   1        int L = 0;
   40   1        if (DIL == 1)
   41   1        {
   42   2          L = ctimer_count_read(Encoder_L);
   43   2        }
   44   1        else
   45   1        {
   46   2          L = -ctimer_count_read(Encoder_L);
*** WARNING C115 IN LINE 46 OF ..\USER\Hardware\encoder.c: '-' applied to unsigned type, result still unsigned
   47   2        }
   48   1        ctimer_count_clean(Encoder_L);
   49   1        return (int)L * 0.7;
   50   1      }
   51          
   52          //--
   53          //  @brief      ??????????????
   54          //  @param      void
   55          //  @return     return : ?????
C251 COMPILER V5.60.0,  encoder                                                            28/05/24  12:24:03  PAGE 2   

   56          //--
   57          int R_Encoder_Pulse(void)
   58          {
   59   1        int R = 0;
   60   1        if (DIR == 0)
   61   1        {
   62   2          R = ctimer_count_read(Encoder_R);
   63   2        }
   64   1        else
   65   1        {
   66   2          R = -ctimer_count_read(Encoder_R);
*** WARNING C115 IN LINE 66 OF ..\USER\Hardware\encoder.c: '-' applied to unsigned type, result still unsigned
   67   2        }
   68   1        ctimer_count_clean(Encoder_R);
   69   1        return (int)R * 0.7;
   70   1      }
   71          
   72          //--
   73          //  @brief      ?????????
   74          //  @param      void
   75          //  @return     void
   76          //--
   77          void Encoder_Read_Pulse(void)
   78          {
   79   1        L_Encoder_Pulse();
   80   1        R_Encoder_Pulse();
   81   1      }
   82          //--
   83          //  @brief      ???????????
   84          //  @param      L_cont??R_cont?????????
   85          //  @return     void
   86          //--
   87          int L_Enc_integral(int L_target)
   88          {
   89   1        static int L = 0, L_flag;
   90   1        L += L_Encoder_Pulse();
   91   1        if (L > L_target)
   92   1        {
   93   2          L_flag = 1;
   94   2        }
   95   1        if (L_flag == 1)
   96   1        {
   97   2          L = 0;
   98   2          L_flag = 0;
   99   2          return 0;
  100   2        }
  101   1        return 1;
  102   1      }
  103          
  104          int R_Enc_integral(int R_target)
  105          {
  106   1        static int R = 0, R_flag;
  107   1        R += R_Encoder_Pulse();
  108   1        if (R > R_target)
  109   1        {
  110   2          R_flag = 1;
  111   2        }
  112   1        if (R_flag == 1)
  113   1        {
  114   2          R_flag = 0;
  115   2          R = 0;
  116   2          return 0;
  117   2        }
  118   1        return 1;
  119   1      }
  120          
C251 COMPILER V5.60.0,  encoder                                                            28/05/24  12:24:03  PAGE 3   

  121          void TM4_Isr() interrupt 20
  122          {
  123   1        static int count = 0, OUT1, OUT2, groy = 0, Huan_Flag = 0;
  124   1        int nh = 0;
  125   1        if (Car_Start_Flag)
  126   1        {
  127   2          // P15 = 1;
  128   2          mpu6050_get_gyro();
  129   2          //imu660ra_get_gyro();
  130   2          dl1a_get_distance();
  131   2          L_Pulse = L_Encoder_Pulse();
  132   2          R_Pulse = R_Encoder_Pulse();
  133   2          NORMALIZATION_TRACKING_ADC();
  134   2          //dir_out=DirControl(0);
  135   2          //PWM_Out=Angle_Speed_Ring(0, Nh_P, Nh_D);
  136   2          // gyro_z3 += Get_Gyro_Z*0.5;
  137   2          //    LRoundabout();
  138   2          //Angle_Ring(90, Wh_P, Wh_D); // 这个参数可以 5/19
  139   2          //OUT1 = Speed_pid_Out(40, (L_Pulse+R_Pulse)*0.5);
  140   2          //OUT2 = RSpeed_pid_Out(15, R_Pulse);
  141   2          //     OUT2 = RSpeed_pid_Out(15, R_Pulse);
  142   2          //Motor_PWM(-dir_out, dir_out);
  143   2          //Motor_PWM(OUT1, OUT1);
  144   2          Tracking(30);
  145   2          //     OUT1=nh_Turn_Out(0, Nh_P, Nh_D);
  146   2          //    Buzzer_OFF;
  147   2          // Motor_PWM(1500,-1500);
  148   2          //   P15 = 0;
  149   2          TIM4_CLEAR_FLAG;
  150   2        }
  151   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       437     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        62     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       116     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
