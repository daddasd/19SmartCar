C251 COMPILER V5.60.0,  encoder                                                            16/05/24  18:05:45  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE encoder
OBJECT MODULE PLACED IN .\Out_File\encoder.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\encoder.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) 
                    -BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;.
                    -.\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\encoder.lst) TABS(2) OBJECT(.\Out_File\
                    -encoder.obj) 

stmt  level    source

    1          #include "myconfig.h"
    2          
    3          int dir_out = 0, nh_out = 0;
    4          int L_Pulse = 0, R_Pulse = 0, Sum_Pulse = 0;
    5          double angle1 = 0.0;
    6          int speed = 105;
    7          float Ang = 0;
    8          
    9          
   10          float L = 0, R = 0;
   11          //--
   12          //  @brief      ???????????
   13          //  @param      void
   14          //  @return     void
   15          //--
   16          
   17          void Encoder_Time_Init(void)
   18          {
   19   1        pit_timer_ms(TIM_4, 2);
   20   1        gpio_mode(Encoder_L, GPI_IMPEDANCE);
   21   1        gpio_mode(Encoder_R, GPI_IMPEDANCE);
   22   1        ctimer_count_init(Encoder_L);
   23   1        ctimer_count_init(Encoder_R);
   24   1        EnableGlobalIRQ(); //???????锟斤拷?
   25   1      }
   26          
   27          //--
   28          //  @brief      ??????????????
   29          //  @param      void
   30          //  @return     return : ?????
   31          //--
   32          
   33          int L_Encoder_Pulse(void)
   34          {
   35   1        if (DIL == 0)
   36   1        {
   37   2          L_Pulse =-ctimer_count_read(Encoder_L);
*** WARNING C115 IN LINE 37 OF ..\USER\Hardware\encoder.c: '-' applied to unsigned type, result still unsigned
   38   2        }
   39   1        else
   40   1        {
   41   2          L_Pulse =ctimer_count_read(Encoder_L);
   42   2        }
   43   1        ctimer_count_clean(Encoder_L);
   44   1        return L_Pulse;
   45   1      }
   46          
   47          //--
   48          //  @brief      ??????????????
   49          //  @param      void
   50          //  @return     return : ?????
   51          //--
   52          int R_Encoder_Pulse(void)
   53          {
   54   1        if (DIR == 0)
   55   1        {
C251 COMPILER V5.60.0,  encoder                                                            16/05/24  18:05:45  PAGE 2   

   56   2          R_Pulse = ctimer_count_read(Encoder_R);
   57   2        }
   58   1        else
   59   1        {
   60   2          R_Pulse =-ctimer_count_read(Encoder_R);
*** WARNING C115 IN LINE 60 OF ..\USER\Hardware\encoder.c: '-' applied to unsigned type, result still unsigned
   61   2        }
   62   1        ctimer_count_clean(Encoder_R);
   63   1        return R_Pulse;
   64   1      }
   65          
   66          //--
   67          //  @brief      ?????????
   68          //  @param      void
   69          //  @return     void
   70          //--
   71          void Encoder_Read_Pulse(void)
   72          {
   73   1        L_Encoder_Pulse();
   74   1        R_Encoder_Pulse();
   75   1      }
   76          //--
   77          //  @brief      ???????????
   78          //  @param      L_cont??R_cont?????????
   79          //  @return     void
   80          //--
   81          int L_Enc_integral(int L_target)
   82          {
   83   1        static int L = 0, L_flag;
   84   1        L += L_Encoder_Pulse();
   85   1        if (L > L_target)
   86   1        {
   87   2          L_flag = 1;
   88   2        }
   89   1        if (L_flag == 1)
   90   1        {
   91   2          L = 0;
   92   2          L_flag = 0;
   93   2          return 0;
   94   2        }
   95   1        return 1;
   96   1      }
   97          
   98          int R_Enc_integral(int R_target)
   99          {
  100   1        static int R = 0, R_flag;
  101   1        R += R_Encoder_Pulse();
  102   1        if (R > R_target)
  103   1        {
  104   2          R_flag = 1;
  105   2        }
  106   1        if (R_flag == 1)
  107   1        {
  108   2          R_flag = 0;
  109   2          R = 0;
  110   2          return 0;
  111   2        }
  112   1        return 1;
  113   1      }
  114          
  115          void TM4_Isr() interrupt 20
  116          {
  117   1        static int count = 0, OUT1, OUT2, groy = 0;
  118   1        int nh = 0;
  119   1        if (Car_Start_Flag)
  120   1        {
C251 COMPILER V5.60.0,  encoder                                                            16/05/24  18:05:45  PAGE 3   

  121   2          mpu6050_get_gyro();
  122   2          L_Pulse = L_Encoder_Pulse()*0.7;
  123   2          R_Pulse = R_Encoder_Pulse()*0.7;
  124   2          NORMALIZATION_TRACKING_ADC(1,1);
  125   2          // Roundabout();
  126   2          // if(Track_flag)
  127   2          // Right_Angle();
  128   2          // Error_Speed();
  129   2          // if(Angle_Ring(90, 25, 1))
  130   2          //  {
  131   2              
  132   2          //  }
  133   2          //Car_Distance(2024);
  134   2          //Angle_Ring1(90, 180, 1080);
  135   2      
  136   2          //Angle_Ring1(90, 0.7,3); 
  137   2          //    L = L_Pulse;
  138   2          //    R = R_Pulse;
  139   2          //    OUT1 = LSpeed_pid_Out(30, L_Pulse);
  140   2          //    OUT2 = RSpeed_pid_Out(30, R_Pulse);
  141   2          // Motor_PWM(nh_out, -nh_out);
  142   2          // OUT1 = LSpeed_pid_Out(20, L_Pulse); // 减或加一个方向环的输出
  143   2          //OUT2 = Speed_pid_Out(15, (L_Pulse+R_Pulse)*0.5);
  144   2          //OUT1=nh_Turn_Out(-10, Nh_P, Nh_D);
  145   2          //Motor_PWM(OUT1,-OUT1);
  146   2          //dir_out=DirControl();
  147   2      
  148   2          Tracking(15);
  149   2          TIM4_CLEAR_FLAG;
  150   2        }
  151   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       438     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        50     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        92     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
