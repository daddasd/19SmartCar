<<<<<<< HEAD
C251 COMPILER V5.60.0,  encoder                                                            07/05/24  18:34:06  PAGE 1   
=======
C251 COMPILER V5.60.0,  encoder                                                            07/05/24  18:41:06  PAGE 1   
>>>>>>> Ë∞ÉÂèÇ


C251 COMPILER V5.60.0, COMPILATION OF MODULE encoder
OBJECT MODULE PLACED IN .\Out_File\encoder.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\encoder.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) 
                    -BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;.
                    -.\USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\encoder.lst) TABS(2) OBJECT(.\Out_File\
                    -encoder.obj) 

stmt  level    source

    1          #include "myconfig.h"
    2          
    3          
    4          int dir_out=0,nh_out=0;
    5          int L_Pulse=0,R_Pulse=0,Sum_Pulse=0;
    6          double angle1=0.0;   
    7          int speed = 105;
    8          float Ang = 0;
    9          //--
   10          //  @brief      ???????????
   11          //  @param      void
   12          //  @return     void         
   13          //--
   14          
   15          void Encoder_Time_Init(void)
   16          {
   17   1          pit_timer_ms(TIM_4,2); 
   18   1          gpio_mode(Encoder_L, GPI_IMPEDANCE);
   19   1          gpio_mode(Encoder_R, GPI_IMPEDANCE);
   20   1          ctimer_count_init(Encoder_L);
   21   1          ctimer_count_init(Encoder_R);
   22   1          EnableGlobalIRQ();  //???????ßÿ?
   23   1      }
   24          
   25          //--
   26          //  @brief      ??????????????
   27          //  @param      void
   28          //  @return     return : ?????         
   29          //--
   30          
   31          int L_Encoder_Pulse(void)
   32          {
   33   1          if(DIL == 1)
   34   1          {
   35   2            L_Pulse = ctimer_count_read(Encoder_L);
   36   2          }
   37   1          else
   38   1          {
   39   2            L_Pulse = ctimer_count_read(Encoder_L);
   40   2          }
   41   1          return L_Pulse;  
   42   1      }
   43          
   44          //--
   45          //  @brief      ??????????????
   46          //  @param      void
   47          //  @return     return : ?????         
   48          //--
   49          int R_Encoder_Pulse(void)
   50          {
   51   1          if(DIR == 0)
   52   1          {
   53   2            R_Pulse = ctimer_count_read(Encoder_R);
   54   2          }
   55   1          else
   56   1          {
<<<<<<< HEAD
C251 COMPILER V5.60.0,  encoder                                                            07/05/24  18:34:06  PAGE 2   
=======
C251 COMPILER V5.60.0,  encoder                                                            07/05/24  18:41:06  PAGE 2   
>>>>>>> Ë∞ÉÂèÇ

   57   2            R_Pulse = ctimer_count_read(Encoder_R);
   58   2          }
   59   1           return R_Pulse;  
   60   1      }
   61          
   62          //--
   63          //  @brief      ?????????
   64          //  @param      void
   65          //  @return     void        
   66          //--
   67          void Encoder_Read_Pulse(void)
   68          {
   69   1        L_Encoder_Pulse();
   70   1        R_Encoder_Pulse();
   71   1      }
   72          //--
   73          //  @brief      ???????????
   74          //  @param      L_cont??R_cont?????????
   75          //  @return     void        
   76          //--
   77          int L_Enc_integral(int L_target)
   78          {
   79   1         static int L=0,L_flag;
   80   1          L+=L_Encoder_Pulse();
   81   1         if(L>L_target)
   82   1         {
   83   2            L_flag=1;
   84   2         }
   85   1         if(L_flag==1)
   86   1         {
   87   2           L=0;
   88   2           L_flag=0;
   89   2           return 0;
   90   2         }
   91   1         return 1;
   92   1      }
   93          
   94          
   95          int R_Enc_integral(int R_target)
   96          {
   97   1         static int R=0,R_flag;
   98   1         R+=R_Encoder_Pulse();
   99   1         if(R>R_target)
  100   1         {
  101   2            R_flag=1;
  102   2         }
  103   1         if(R_flag==1)
  104   1         {
  105   2           R_flag=0;
  106   2           R=0;
  107   2           return 0;
  108   2         }
  109   1         return 1;
  110   1      }
  111          
  112          void TM4_Isr() interrupt 20
  113          {
  114   1        static int count = 0;
<<<<<<< HEAD
  115   1        if(Car_Start_Flag)
  116   1        {
  117   2          mpu6050_get_gyro();
  118   2          L_Pulse=L_Encoder_Pulse();
  119   2          R_Pulse=R_Encoder_Pulse();
  120   2          NORMALIZATION_TRACKING_ADC(1,1);
  121   2          //  Roundabout();
  122   2          //  if(Track_flag)
C251 COMPILER V5.60.0,  encoder                                                            07/05/24  18:34:06  PAGE 3   
=======
  115   1        int nh = 0;
  116   1        if(Car_Start_Flag)
  117   1        {
  118   2          mpu6050_get_gyro();
  119   2          L_Pulse=L_Encoder_Pulse();
  120   2          R_Pulse=R_Encoder_Pulse();
  121   2          NORMALIZATION_TRACKING_ADC(1,1);
  122   2          //  Roundabout();
C251 COMPILER V5.60.0,  encoder                                                            07/05/24  18:41:06  PAGE 3   
>>>>>>> Ë∞ÉÂèÇ

  123   2          //  Right_Angle();
  124   2          //  Error_Speed();
  125   2          nh_out = nh_Turn_Out(0, Nh_P, Nh_D);
  126   2          Motor_PWM(-nh_out, +nh_out);
  127   2          //  Tracking(speed+Err_speed);
  128   2          ctimer_count_clean(Encoder_L);
  129   2          ctimer_count_clean(Encoder_R);
  130   2          TIM4_CLEAR_FLAG; //????ßÿ???
  131   2        }
  132   1      }
  133          
  134          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       405     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        34     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        70     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
