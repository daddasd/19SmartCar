C251 COMPILER V5.60.0,  Motor                                                              08/05/24  21:07:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description: 
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          
   12          
   13          #define MOTOR_MAX  8000
   14          
   15          float Motor_P = 260;
   16          float Motor_I = 0.4;
   17          float Speed_Ring = 0;
   18          
   19          
   20          Motor_PID_InitTypedef Motor_pid;
   21          
   22          
   23          int16 limit(int16 In,int16 limit)
   24          {
   25   1        return (In > limit) ? limit : ((In < -limit) ? -limit : In);
   26   1      }
   27          
   28          //--
   29          //  @brief      电机PWM初始化
   30          //  @param      void
   31          //  @return     void         
   32          //--
   33          
   34          void Motor_Init(void)
   35          {
   36   1          pwm_init(MOTOR_L_PWM, 17000,0);
   37   1          pwm_init(MOTOR_R_PWM, 17000,0);
   38   1      }
   39          
   40          //--
   41          //  @brief      输出pwm
   42          //  @param      L_PWM:左电机pwm
   43          //  @param      R_PWM:右电机pwm
   44          //  @return     void         
   45          //--
   46          
   47          void Motor_PWM(int L_PWM,int R_PWM)
   48          {
   49   1        if(L_PWM<0)
   50   1        {
   51   2          MOTOR_L_DIR=0;
   52   2          pwm_duty(MOTOR_L_PWM,abs(L_PWM));
   53   2        }
   54   1        else{
   55   2          MOTOR_L_DIR=1;
   56   2          pwm_duty(MOTOR_L_PWM,L_PWM);
C251 COMPILER V5.60.0,  Motor                                                              08/05/24  21:07:04  PAGE 2   

   57   2        }
   58   1        if(R_PWM<0)
   59   1        {
   60   2          MOTOR_R_DIR=0;
   61   2          pwm_duty(MOTOR_R_PWM,abs(R_PWM));
   62   2        }
   63   1        else{
   64   2          MOTOR_R_DIR=1;
   65   2          pwm_duty(MOTOR_R_PWM,R_PWM);
   66   2        }
   67   1      }
   68          
   69          //--
   70          //  @brief      电机pid调节
   71          //  @param      kp,ki.kd
   72          //  @return     void         
   73          //--
   74          
   75          void Motor_SET_PID(float Kp,float Ki,float Kd)
   76          {
   77   1        Motor_pid.Motor_Target_Value=0;
   78   1        Motor_pid.Motor_Actual_Value=0;
   79   1        Motor_pid.Motor_err=0;
   80   1        Motor_pid.Motor_err_last=0;
   81   1        Motor_pid.Motor_err_last2=0;
   82   1        Motor_pid.Motor_Kp=Kp;
   83   1        Motor_pid.Motor_Ki=Ki;
   84   1        Motor_pid.Motor_Kd=Kd;
   85   1        Motor_pid.Motor_Out_Value=0;
   86   1        Motor_pid.Motor_integral=0;
   87   1      }
   88          
   89          /*入口：NEW_DATA 新采样值
   90                 OLD_DATA 上次滤波结果
   91                 k        滤波系数(0~255)(代表在滤波结果中的权重)
   92            出口：         本次滤波结果
   93           */
   94           char filter_1(char NEW_DATA,char OLD_DATA,char k)
   95          {
   96   1          int result;
   97   1          if(NEW_DATA<OLD_DATA)
   98   1          {
   99   2              result=OLD_DATA-NEW_DATA;
  100   2              result=result*k;
  101   2              result=result+128;//+128是为了四色五入
  102   2              result=result/256;
  103   2              result=OLD_DATA-result;
  104   2          }
  105   1          else if(NEW_DATA>OLD_DATA)
  106   1          {
  107   2              result=NEW_DATA-OLD_DATA;
  108   2              result=result*k;
  109   2              result=result+128;//+128是为了四色五入
  110   2              result=result/256;
  111   2              result=OLD_DATA-result;
  112   2          }
  113   1          else result=OLD_DATA;
  114   1          return((char)result);
  115   1      }
  116          
  117          
  118          //--
  119          //  @brief      速度环
  120          //  @param      Target_Value: 目标速度
  121          //  @param      Actual_Value: 实际速度      
  122          //  @return     速度环输出        
C251 COMPILER V5.60.0,  Motor                                                              08/05/24  21:07:04  PAGE 3   

  123          //--
  124          int LSpeed_pid_Out(int Target_Value,int Actual_Value)
  125          {
  126   1        int error = 0;
  127   1        static float last_err = 0, speed_out = 0, P_out = 0, I_out = 0, out = 0;
  128   1        error = Target_Value - Actual_Value ;
  129   1        P_out = Motor_P * (error - last_err);
  130   1        I_out = Motor_I * error;
  131   1        if (I_out > 2000)
  132   1          I_out = 2000;
  133   1        if (I_out < -2000)
  134   1          I_out = -2000;
  135   1        out = P_out + I_out;
  136   1        speed_out += out;
  137   1        last_err = error;
  138   1        //Speed_Ring = speed_out;
  139   1        return (int)speed_out;
  140   1      }
  141          
  142          int RSpeed_pid_Out(int Target_Value, int Actual_Value)
  143          {
  144   1        int error = 0;
  145   1        static float last_err = 0, speed_out = 0, P_out = 0, I_out = 0, out = 0;
  146   1        error = Target_Value - Actual_Value;
  147   1        P_out = Motor_P * (error - last_err);
  148   1        I_out = Motor_I * error;
  149   1        if (I_out > 2000)
  150   1          I_out = 2000;
  151   1        if (I_out < -2000)
  152   1          I_out = -2000;
  153   1        out = P_out + I_out;
  154   1        speed_out += out;
  155   1        last_err = error;
  156   1        //Speed_Ring = speed_out;
  157   1        return (int)speed_out;
  158   1      }
  159          
  160          void Buzzer(int time)
  161          {
  162   1        Buzzer_ON;
  163   1        delay_ms(time);
  164   1        Buzzer_OFF;
  165   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       875     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       131     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       104     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
