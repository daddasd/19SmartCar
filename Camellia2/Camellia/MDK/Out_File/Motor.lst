C251 COMPILER V5.60.0,  Motor                                                              16/05/24  18:21:32  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description: 
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          
   12          
   13          #define MOTOR_MAX  8000
   14          
   15          float Motor_P = 135;
   16          float Motor_I = 12 ;
   17          
   18          float Motor_RP = 155;
   19          float Motor_RI = 18;
   20          float Speed_Ring = 0;
   21          
   22          
   23          Motor_PID_InitTypedef Motor_pid;
   24          
   25          
   26          int16 limit(int16 In,int16 limit)
   27          {
   28   1        if(In>limit&&In>0)
   29   1          In = limit;
   30   1        else if(In<-limit&&In<0)
   31   1          In = -limit;
   32   1        return In;
   33   1      }
   34          
   35          //--
   36          //  @brief      电机PWM初始化
   37          //  @param      void
   38          //  @return     void         
   39          //--
   40          
   41          void Motor_Init(void)
   42          {
   43   1          pwm_init(MOTOR_L_PWM, 17000,0);
   44   1          pwm_init(MOTOR_R_PWM, 17000,0);
   45   1      }
   46          
   47          //--
   48          //  @brief      输出pwm
   49          //  @param      L_PWM:左电机pwm
   50          //  @param      R_PWM:右电机pwm
   51          //  @return     void         
   52          //--
   53          
   54          void Motor_PWM(int L_PWM,int R_PWM)
   55          {
   56   1        L_PWM = limit(L_PWM, 9500);
C251 COMPILER V5.60.0,  Motor                                                              16/05/24  18:21:32  PAGE 2   

   57   1        R_PWM = limit(R_PWM, 9500);
   58   1        if(L_PWM<0)
   59   1        {
   60   2          MOTOR_L_DIR=1;
   61   2          pwm_duty(MOTOR_L_PWM,abs(L_PWM));
   62   2        }
   63   1        else{
   64   2          MOTOR_L_DIR=0;
   65   2          pwm_duty(MOTOR_L_PWM,L_PWM);
   66   2        }
   67   1        if(R_PWM<0)
   68   1        {
   69   2          MOTOR_R_DIR=1;
   70   2          pwm_duty(MOTOR_R_PWM,abs(R_PWM));
   71   2        }
   72   1        else{
   73   2          MOTOR_R_DIR=0;
   74   2          pwm_duty(MOTOR_R_PWM,R_PWM);
   75   2        }
   76   1      }
   77          
   78          //--
   79          //  @brief      电机pid调节
   80          //  @param      kp,ki.kd
   81          //  @return     void         
   82          //--
   83          
   84          void Motor_SET_PID(float Kp,float Ki,float Kd)
   85          {
   86   1        Motor_pid.Motor_Target_Value=0;
   87   1        Motor_pid.Motor_Actual_Value=0;
   88   1        Motor_pid.Motor_err=0;
   89   1        Motor_pid.Motor_err_last=0;
   90   1        Motor_pid.Motor_err_last2=0;
   91   1        Motor_pid.Motor_Kp=Kp;
   92   1        Motor_pid.Motor_Ki=Ki;
   93   1        Motor_pid.Motor_Kd=Kd;
   94   1        Motor_pid.Motor_Out_Value=0;
   95   1        Motor_pid.Motor_integral=0;
   96   1      }
   97          
   98          
   99          //--
  100          //  @brief      速度环
  101          //  @param      Target_Value: 目标速度
  102          //  @param      Actual_Value: 实际速度      
  103          //  @return     速度环输出        
  104          //--
  105          int LSpeed_pid_Out(int Target_Value,int Actual_Value)
  106          {
  107   1        int error = 0;
  108   1        static float last_err = 0, speed_out = 0, P_out = 0, I_out = 0, out = 0;
  109   1        error = Target_Value - Actual_Value ;
  110   1        P_out = Motor_P * (error - last_err);
  111   1        I_out = Motor_I * error;
  112   1        if (I_out > 2000)
  113   1          I_out = 2000;
  114   1        if (I_out < -2000)
  115   1          I_out = -2000;
  116   1        out = P_out + I_out;
  117   1        speed_out += out;
  118   1        last_err = error;
  119   1        //Speed_Ring = speed_out;
  120   1        return (int)speed_out;
  121   1      }
  122          
C251 COMPILER V5.60.0,  Motor                                                              16/05/24  18:21:32  PAGE 3   

  123          int RSpeed_pid_Out(int Target_Value, int Actual_Value)
  124          {
  125   1        int error = 0;
  126   1        static float last_err = 0, speed_out = 0, P_out = 0, I_out = 0, out = 0;
  127   1        error = Target_Value - Actual_Value;
  128   1        P_out = Motor_RP * (error - last_err);
  129   1        I_out = Motor_RI * error;
  130   1        if (I_out > 2000)
  131   1          I_out = 2000;
  132   1        if (I_out < -2000)
  133   1          I_out = -2000;
  134   1        out = P_out + I_out;
  135   1        speed_out += out;
  136   1        last_err = error;
  137   1        //Speed_Ring = speed_out;
  138   1        return (int)speed_out;
  139   1      }
  140          
  141          void Buzzer(int time)
  142          {
  143   1        Buzzer_ON;
  144   1        delay_ms(time);
  145   1        Buzzer_OFF;
  146   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       714     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       134     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       120     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
