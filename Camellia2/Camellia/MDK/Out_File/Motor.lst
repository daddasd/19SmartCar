C251 COMPILER V5.60.0,  Motor                                                              17/07/24  20:32:45  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          #define MOTOR_MAX 8500
   12          #define MOTOR_I_MAX 2500
   13          
   14          float Motor_P = 55;
   15          float Motor_I = 2.5;
   16          
   17          float Speed_Ring = 0;
   18          
   19          Motor_PID_InitTypedef Motor_pid;
   20          
   21          
   22          
   23          
   24          
   25          int16 limit(int16 In, int16 limit)
   26          {
   27   1        if (In > limit && In > 0)
   28   1          In = limit;
   29   1        else if (In < -limit && In < 0)
   30   1          In = -limit;
   31   1        return In;
   32   1      }
   33          
   34          //--
   35          //  @brief      电机PWM初始化
   36          //  @param      void
   37          //  @return     void
   38          //--
   39          
   40          void Motor_Init(void)
   41          {
   42   1        pwm_init(MOTOR_L_PWM, 17000, 0);
   43   1        pwm_init(MOTOR_R_PWM, 17000, 0);
   44   1      }
   45          
   46          //--
   47          //  @brief      输出pwm
   48          //  @param      L_PWM:左电机pwm
   49          //  @param      R_PWM:右电机pwm
   50          //  @return     void
   51          //--
   52          
   53          void Motor_PWM(int L_PWM, int R_PWM)
   54          {
   55   1        // if(L_PWM>3000&&R_PWM<-3000)
   56   1        // {  L_PWM = L_PWM *1.2;
C251 COMPILER V5.60.0,  Motor                                                              17/07/24  20:32:45  PAGE 2   

   57   1        //  R_PWM = R_PWM *1.2;
   58   1        // }
   59   1        // if (R_PWM > 0 && L_PWM < 0)
   60   1        // {
   61   1        //  L_PWM = L_PWM * 1.2;
   62   1        //  R_PWM = R_PWM * 1.5;
   63   1        // }
   64   1        if (L_PWM < 0)
   65   1        {
   66   2          MOTOR_L_DIR = 1;
   67   2          pwm_duty(MOTOR_L_PWM, abs(L_PWM));
   68   2        }
   69   1        else
   70   1        {
   71   2          MOTOR_L_DIR = 0;
   72   2          pwm_duty(MOTOR_L_PWM, L_PWM);//弥补电机差异
   73   2        }
   74   1        if (R_PWM < 0)
   75   1        {
   76   2          MOTOR_R_DIR = 1;
   77   2          pwm_duty(MOTOR_R_PWM, abs(R_PWM));
   78   2        }
   79   1        else
   80   1        {
   81   2          MOTOR_R_DIR = 0;
   82   2          pwm_duty(MOTOR_R_PWM, R_PWM);
   83   2        }
   84   1      }
   85          //--
   86          //  @brief      电机pid调节
   87          //  @param      kp,ki.kd
   88          //  @return     void
   89          //--
   90          void Motor_SET_PID(float Kp, float Ki, float Kd)
   91          {
   92   1        Motor_pid.Motor_Target_Value = 0;
   93   1        Motor_pid.Motor_Actual_Value = 0;
   94   1        Motor_pid.Motor_err = 0;
   95   1        Motor_pid.Motor_err_last = 0;
   96   1        Motor_pid.Motor_err_last2 = 0;
   97   1        Motor_pid.Motor_Kp = 20;
   98   1        Motor_pid.Motor_Ki = 1.2;
   99   1        Motor_pid.Motor_Kd = Kd;
  100   1        Motor_pid.Motor_Out_Value = 0;
  101   1        Motor_pid.Motor_integral = 0;
  102   1      }
*** WARNING C47 IN LINE 90 OF ..\USER\Hardware\Motor.c: 'Kp': unreferenced parameter
*** WARNING C47 IN LINE 90 OF ..\USER\Hardware\Motor.c: 'Ki': unreferenced parameter
  103          
  104          //--
  105          //  @brief      速度环
  106          //  @param      Target_Value: 目标速度
  107          //  @param      Actual_Value: 实际速度
  108          //  @return     速度环输出
  109          //--
  110          int Speed_pid_Out(int Target_Value, int Actual_Value)
  111          {
  112   1        Motor_pid.Motor_err = Target_Value - Actual_Value;
  113   1        Motor_pid.Motor_KP_Val = Motor_pid.Motor_err*Motor_P;
  114   1        Motor_pid.Motor_KI_Val += Motor_pid.Motor_err;
  115   1        if (Motor_pid.Motor_KI_Val>1000)
  116   1          Motor_pid.Motor_KI_Val = 1000;
  117   1        else if(Motor_pid.Motor_KI_Val<-1000)
  118   1          Motor_pid.Motor_KI_Val = -1000;
  119   1        Motor_pid.Motor_Out_Value = Motor_pid.Motor_KI_Val * Motor_I + Motor_pid.Motor_KP_Val;
  120   1        Motor_pid.Motor_Out_Value = limit(Motor_pid.Motor_Out_Value, MOTOR_MAX);
C251 COMPILER V5.60.0,  Motor                                                              17/07/24  20:32:45  PAGE 3   

  121   1        return (int)Motor_pid.Motor_Out_Value;
  122   1      }
  123          
  124          
  125          void Motor_Control(int L_Speed , int R_Speed)
  126          {
  127   1        int L_PWM, R_PWM;
  128   1        L_PWM = Speed_pid_Out(L_Speed, L_Pulse);
  129   1        R_PWM = Speed_pid_Out(R_Speed, R_Pulse);
  130   1        Motor_PWM(L_PWM, R_PWM);
  131   1      }
  132          /**
  133           * @brief 转堵保护
  134           * 
  135           */
  136          void Rotary_Plug(T)
  137          {
*** WARNING C35 IN LINE 137 OF ..\USER\Hardware\Motor.c: 'Rotary_Plug': uses old-style declarator
  138   1        static int time = 0;
  139   1        int Car_Stop = 0;
  140   1        if ((L_Pulse + R_Pulse < 4) || Car_Stop == 1)
  141   1        {
  142   2          time++;
  143   2          if(time>T)
  144   2          {
  145   3            Motor_PWM(0, 0);
  146   3            Car_Stop = 1;
  147   3          }
  148   2        }
  149   1        else
  150   1          time = 0;
  151   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       600     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        90     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        30     ------
End of Module Information.


C251 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
