C251 COMPILER V5.60.0,  Motor                                                              28/05/24  12:15:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          #define MOTOR_MAX 9500
   12          #define MOTOR_I_MAX 2500
   13          
   14          float Motor_P = 30;
   15          float Motor_I = 0.11;
   16          
   17          float Speed_Ring = 0;
   18          
   19          Motor_PID_InitTypedef Motor_pid;
   20          
   21          int16 limit(int16 In, int16 limit)
   22          {
   23   1        if (In > limit && In > 0)
   24   1          In = limit;
   25   1        else if (In < -limit && In < 0)
   26   1          In = -limit;
   27   1        return In;
   28   1      }
   29          
   30          //--
   31          //  @brief      电机PWM初始化
   32          //  @param      void
   33          //  @return     void
   34          //--
   35          
   36          void Motor_Init(void)
   37          {
   38   1        pwm_init(MOTOR_L_PWM, 17000, 0);
   39   1        pwm_init(MOTOR_R_PWM, 17000, 0);
   40   1      }
   41          
   42          //--
   43          //  @brief      输出pwm
   44          //  @param      L_PWM:左电机pwm
   45          //  @param      R_PWM:右电机pwm
   46          //  @return     void
   47          //--
   48          
   49          void Motor_PWM(int L_PWM, int R_PWM)
   50          {
   51   1        if (L_PWM < 0)
   52   1        {
   53   2          MOTOR_L_DIR = 1;
   54   2          pwm_duty(MOTOR_L_PWM, abs(L_PWM+300));
   55   2        }
   56   1        else
C251 COMPILER V5.60.0,  Motor                                                              28/05/24  12:15:06  PAGE 2   

   57   1        {
   58   2          MOTOR_L_DIR = 0;
   59   2          pwm_duty(MOTOR_L_PWM, L_PWM+300);//弥补电机差异
   60   2        }
   61   1        if (R_PWM < 0)
   62   1        {
   63   2          MOTOR_R_DIR = 1;
   64   2          pwm_duty(MOTOR_R_PWM, abs(R_PWM));
   65   2        }
   66   1        else
   67   1        {
   68   2          MOTOR_R_DIR = 0;
   69   2          pwm_duty(MOTOR_R_PWM, R_PWM);
   70   2        }
   71   1      }
   72          //--
   73          //  @brief      电机pid调节
   74          //  @param      kp,ki.kd
   75          //  @return     void
   76          //--
   77          void Motor_SET_PID(float Kp, float Ki, float Kd)
   78          {
   79   1        Motor_pid.Motor_Target_Value = 0;
   80   1        Motor_pid.Motor_Actual_Value = 0;
   81   1        Motor_pid.Motor_err = 0;
   82   1        Motor_pid.Motor_err_last = 0;
   83   1        Motor_pid.Motor_err_last2 = 0;
   84   1        Motor_pid.Motor_Kp = Kp;
   85   1        Motor_pid.Motor_Ki = Ki;
   86   1        Motor_pid.Motor_Kd = Kd;
   87   1        Motor_pid.Motor_Out_Value = 0;
   88   1        Motor_pid.Motor_integral = 0;
   89   1      }
   90          
   91          //--
   92          //  @brief      速度环
   93          //  @param      Target_Value: 目标速度
   94          //  @param      Actual_Value: 实际速度
   95          //  @return     速度环输出
   96          //--
   97          int Speed_pid_Out(int Target_Value, int Actual_Value)
   98          {
   99   1        Motor_pid.Motor_err = Target_Value - Actual_Value;
  100   1        Motor_pid.Motor_KP_Val = Motor_pid.Motor_err * Motor_P;
  101   1        Motor_pid.Motor_KI_Val += Motor_pid.Motor_err * Motor_I;
  102   1        Motor_pid.Motor_KI_Val = limit(Motor_pid.Motor_KI_Val, MOTOR_I_MAX);
  103   1        Motor_pid.Motor_Out_Value=Motor_pid.Motor_KI_Val+Motor_pid.Motor_KP_Val;
  104   1        Motor_pid.Motor_Out_Value = limit(Motor_pid.Motor_Out_Value, MOTOR_MAX);
  105   1        return (int)Motor_pid.Motor_Out_Value;
  106   1      }
  107          
  108          void Buzzer(int time)
  109          {
  110   1        Buzzer_ON;
  111   1        delay_ms(time);
  112   1        Buzzer_OFF;
  113   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       467     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
C251 COMPILER V5.60.0,  Motor                                                              28/05/24  12:15:06  PAGE 3   

  xdata-const size     =    ------     ------
  edata size           =        86     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
