C251 COMPILER V5.60.0,  Motor                                                              22/07/24  21:09:22  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          #define MOTOR_MAX 8500
   12          #define MOTOR_I_MAX 2500
   13          
   14          float Motor_P = 65;
   15          float Motor_I = 2.5;
   16          
   17          float Speed_Ring = 0;
   18          
   19          int LMotor_PWM = 0;
   20          int RMotor_PWM = 0;
   21          
   22          Motor_PID_InitTypedef Motor_pid;
   23          
   24          
   25          
   26          
   27          
   28          int32 limit(int32 In, int32 limit)
   29          {
   30   1        if (In > limit && In > 0)
   31   1          In = limit;
   32   1        else if (In < -limit && In < 0)
   33   1          In = -limit;
   34   1        return In;
   35   1      }
   36          
   37          //--
   38          //  @brief      电机PWM初始化
   39          //  @param      void
   40          //  @return     void
   41          //--
   42          
   43          void Motor_Init(void)
   44          {
   45   1        pwm_init(MOTOR_L_PWM, 17000, 0);
   46   1        pwm_init(MOTOR_R_PWM, 17000, 0);
   47   1      }
   48          
   49          //--
   50          //  @brief      输出pwm
   51          //  @param      L_PWM:左电机pwm
   52          //  @param      R_PWM:右电机pwm
   53          //  @return     void
   54          //--
   55          
   56          void Motor_PWM(int L_PWM, int R_PWM)
C251 COMPILER V5.60.0,  Motor                                                              22/07/24  21:09:22  PAGE 2   

   57          {
   58   1        
   59   1        // if(L_PWM>3000&&R_PWM<-3000)
   60   1        // {  L_PWM = L_PWM *1.2;
   61   1        //  R_PWM = R_PWM *1.2;
   62   1        // }
   63   1        // if (R_PWM > 0 && L_PWM < 0)
   64   1        // {
   65   1        //  L_PWM = L_PWM * 1.2;
   66   1        //  R_PWM = R_PWM * 1.5;
   67   1        // }
   68   1        if (L_PWM < 0)
   69   1        {
   70   2          MOTOR_L_DIR = 0;
   71   2          pwm_duty(MOTOR_L_PWM, abs(L_PWM));
   72   2        }
   73   1        else
   74   1        {
   75   2          MOTOR_L_DIR = 1;
   76   2          pwm_duty(MOTOR_L_PWM, L_PWM);//弥补电机差异
   77   2        }
   78   1        if (R_PWM < 0)
   79   1        {
   80   2          MOTOR_R_DIR = 1;
   81   2          pwm_duty(MOTOR_R_PWM, abs(R_PWM));
   82   2        }
   83   1        else
   84   1        {
   85   2          MOTOR_R_DIR = 0;
   86   2          pwm_duty(MOTOR_R_PWM, R_PWM);
   87   2        }
   88   1      }
   89          //--
   90          //  @brief      电机pid调节
   91          //  @param      kp,ki.kd
   92          //  @return     void
   93          //--
   94          void Motor_SET_PID(float Kp, float Ki, float Kd)
   95          {
   96   1        Motor_pid.Motor_Target_Value = 0;
   97   1        Motor_pid.Motor_Actual_Value = 0;
   98   1        Motor_pid.Motor_err = 0;
   99   1        Motor_pid.Motor_err_last = 0;
  100   1        Motor_pid.Motor_err_last2 = 0;
  101   1        Motor_pid.Motor_Kp = 20;
  102   1        Motor_pid.Motor_Ki = 1.2;
  103   1        Motor_pid.Motor_Kd = Kd;
  104   1        Motor_pid.Motor_Out_Value = 0;
  105   1        Motor_pid.Motor_integral = 0;
  106   1      }
*** WARNING C47 IN LINE 94 OF ..\USER\Hardware\Motor.c: 'Kp': unreferenced parameter
*** WARNING C47 IN LINE 94 OF ..\USER\Hardware\Motor.c: 'Ki': unreferenced parameter
  107          
  108          //--
  109          //  @brief      速度环
  110          //  @param      Target_Value: 目标速度
  111          //  @param      Actual_Value: 实际速度
  112          //  @return     速度环输出
  113          //--
  114          int Speed_pid_Out(int Target_Value, int Actual_Value)
  115          {
  116   1        Motor_pid.Motor_err = Target_Value - Actual_Value;
  117   1        Motor_pid.Motor_KP_Val = Motor_pid.Motor_err*Motor_P;
  118   1        Motor_pid.Motor_KI_Val += Motor_pid.Motor_err;
  119   1        if (Motor_pid.Motor_KI_Val>1000)
  120   1          Motor_pid.Motor_KI_Val = 1000;
C251 COMPILER V5.60.0,  Motor                                                              22/07/24  21:09:22  PAGE 3   

  121   1        else if(Motor_pid.Motor_KI_Val<-1000)
  122   1          Motor_pid.Motor_KI_Val = -1000;
  123   1        Motor_pid.Motor_Out_Value = Motor_pid.Motor_KI_Val * Motor_I + Motor_pid.Motor_KP_Val;
  124   1        Motor_pid.Motor_Out_Value = limit(Motor_pid.Motor_Out_Value, MOTOR_MAX);
  125   1        return (int)Motor_pid.Motor_Out_Value;
  126   1      }
  127          
  128          
  129          void Motor_Control(int L_Speed , int R_Speed)
  130          {
  131   1        int L_PWM, R_PWM;
  132   1        L_PWM = Speed_pid_Out(L_Speed, L_Pulse);
  133   1        R_PWM = Speed_pid_Out(R_Speed, R_Pulse);
  134   1        Motor_PWM(L_PWM, R_PWM);
  135   1      }
  136          /**
  137           * @brief 转堵保护
  138           * 
  139           */
  140          void Rotary_Plug(T)
  141          {
*** WARNING C35 IN LINE 141 OF ..\USER\Hardware\Motor.c: 'Rotary_Plug': uses old-style declarator
  142   1        static int time = 0;
  143   1        int Car_Stop = 0;
  144   1        if ((L_Pulse + R_Pulse < 4) || Car_Stop == 1)
  145   1        {
  146   2          time++;
  147   2          if(time>T)
  148   2          {
  149   3            Motor_PWM(0, 0);
  150   3            Car_Stop = 1;
  151   3          }
  152   2        }
  153   1        else
  154   1          time = 0;
  155   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       602     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        98     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        42     ------
End of Module Information.


C251 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
