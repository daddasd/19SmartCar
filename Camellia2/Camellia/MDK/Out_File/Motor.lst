C251 COMPILER V5.60.0,  Motor                                                              25/05/24  16:27:26  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: E:\Keil5C251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description:
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          #define MOTOR_MAX 8000
   12          
   13          float Motor_P = 18;
   14          float Motor_I = 0.15;
   15          
   16          float Motor_RP = 35;
   17          float Motor_RI = 1.25;
   18          float Speed_Ring = 0;
   19          
   20          Motor_PID_InitTypedef Motor_pid;
   21          
   22          int16 limit(int16 In, int16 limit)
   23          {
   24   1        if (In > limit && In > 0)
   25   1          In = limit;
   26   1        else if (In < -limit && In < 0)
   27   1          In = -limit;
   28   1        return In;
   29   1      }
   30          
   31          //--
   32          //  @brief      电机PWM初始化
   33          //  @param      void
   34          //  @return     void
   35          //--
   36          
   37          void Motor_Init(void)
   38          {
   39   1        pwm_init(MOTOR_L_PWM, 17000, 0);
   40   1        pwm_init(MOTOR_R_PWM, 17000, 0);
   41   1      }
   42          
   43          //--
   44          //  @brief      输出pwm
   45          //  @param      L_PWM:左电机pwm
   46          //  @param      R_PWM:右电机pwm
   47          //  @return     void
   48          //--
   49          
   50          void Motor_PWM(int L_PWM, int R_PWM)
   51          {
   52   1        if (L_PWM < 0)
   53   1        {
   54   2          MOTOR_L_DIR = 1;
   55   2          pwm_duty(MOTOR_L_PWM, abs(L_PWM+300));
   56   2        }
C251 COMPILER V5.60.0,  Motor                                                              25/05/24  16:27:26  PAGE 2   

   57   1        else
   58   1        {
   59   2          MOTOR_L_DIR = 0;
   60   2          pwm_duty(MOTOR_L_PWM, L_PWM+300);//弥补电机差异
   61   2        }
   62   1        if (R_PWM < 0)
   63   1        {
   64   2          MOTOR_R_DIR = 1;
   65   2          pwm_duty(MOTOR_R_PWM, abs(R_PWM));
   66   2        }
   67   1        else
   68   1        {
   69   2          MOTOR_R_DIR = 0;
   70   2          pwm_duty(MOTOR_R_PWM, R_PWM);
   71   2        }
   72   1      }
   73          
   74          //--
   75          //  @brief      电机pid调节
   76          //  @param      kp,ki.kd
   77          //  @return     void
   78          //--
   79          
   80          void Motor_SET_PID(float Kp, float Ki, float Kd)
   81          {
   82   1        Motor_pid.Motor_Target_Value = 0;
   83   1        Motor_pid.Motor_Actual_Value = 0;
   84   1        Motor_pid.Motor_err = 0;
   85   1        Motor_pid.Motor_err_last = 0;
   86   1        Motor_pid.Motor_err_last2 = 0;
   87   1        Motor_pid.Motor_Kp = Kp;
   88   1        Motor_pid.Motor_Ki = Ki;
   89   1        Motor_pid.Motor_Kd = Kd;
   90   1        Motor_pid.Motor_Out_Value = 0;
   91   1        Motor_pid.Motor_integral = 0;
   92   1      }
   93          
   94          /*入口：NEW_DATA 新采样值
   95               OLD_DATA 上次滤波结果
   96               k        滤波系数(0~255)(代表在滤波结果中的权重)
   97            出口：         本次滤波结果
   98           */
   99          char filter_1(char NEW_DATA, char OLD_DATA, char k)
  100          {
  101   1        int result;
  102   1        if (NEW_DATA < OLD_DATA)
  103   1        {
  104   2          result = OLD_DATA - NEW_DATA;
  105   2          result = result * k;
  106   2          result = result + 128; //+128是为了四色五入
  107   2          result = result / 256;
  108   2          result = OLD_DATA - result;
  109   2        }
  110   1        else if (NEW_DATA > OLD_DATA)
  111   1        {
  112   2          result = NEW_DATA - OLD_DATA;
  113   2          result = result * k;
  114   2          result = result + 128; //+128是为了四色五入
  115   2          result = result / 256;
  116   2          result = OLD_DATA - result;
  117   2        }
  118   1        else
  119   1          result = OLD_DATA;
  120   1        return ((char)result);
  121   1      }
  122          
C251 COMPILER V5.60.0,  Motor                                                              25/05/24  16:27:26  PAGE 3   

  123          //--
  124          //  @brief      速度环
  125          //  @param      Target_Value: 目标速度
  126          //  @param      Actual_Value: 实际速度
  127          //  @return     速度环输出
  128          //--
  129          
  130          int Speed_pid_Out(int Target_Value, int Actual_Value)
  131          {
  132   1        int error = 0;
  133   1        static float speed_out = 0, P_out = 0, I_out = 0, out = 0, jifen = 0;
  134   1        ;
  135   1        error = Target_Value - Actual_Value;
  136   1        P_out = Motor_P * error;
  137   1        jifen += error;
  138   1        if (jifen > 800)
  139   1          jifen = 800;
  140   1        if (jifen < -800)
  141   1          jifen = -800;
  142   1        out = P_out + jifen*Motor_I;
  143   1        speed_out = out;
  144   1        speed_out = limit(speed_out, 10000);
  145   1        return speed_out;
  146   1      }
  147          
  148          int RSpeed_pid_Out(int Target_Value, int Actual_Value)
  149          {
  150   1        int error = 0;
  151   1        static float last_err = 0, speed_out = 0, P_out = 0, I_out = 0, out = 0;
  152   1        error = Target_Value - Actual_Value;
  153   1        P_out = Motor_RP * (error - last_err);
  154   1        I_out = Motor_RI * error;
  155   1        if (I_out > 800)
  156   1          I_out = 800;
  157   1        if (I_out < -800)
  158   1          I_out = -800;
  159   1        out = P_out + I_out;
  160   1        speed_out += out;
  161   1        last_err = error;
  162   1        speed_out = limit(speed_out, 7500);
  163   1        return (int)speed_out;
  164   1      }
  165          
  166          void Buzzer(int time)
  167          {
  168   1        Buzzer_ON;
  169   1        delay_ms(time);
  170   1        Buzzer_OFF;
  171   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       929     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       139     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
C251 COMPILER V5.60.0,  Motor                                                              25/05/24  16:27:26  PAGE 4   

  const size           =    ------     ------
  hconst size          =       120     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
