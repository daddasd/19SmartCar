C251 COMPILER V5.60.0,  Motor                                                              18/05/24  19:34:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description: 
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          
   12          
   13          #define MOTOR_MAX  8000
   14          
   15          float Motor_P = 260;
   16          float Motor_I = 15.5 ;
   17          
   18          float Motor_RP = 285;
   19          float Motor_RI = 18.5;
   20          float Speed_Ring = 0;
   21          
   22          Motor_PID_InitTypedef Motor_pid;
   23          
   24          
   25          int16 limit(int16 In,int16 limit)
   26          {
   27   1        if(In>limit&&In>0)
   28   1          In = limit;
   29   1        else if(In<-limit&&In<0)
   30   1          In = -limit;
   31   1        return In;
   32   1      }
   33          
   34          //--
   35          //  @brief      电机PWM初始化
   36          //  @param      void
   37          //  @return     void         
   38          //--
   39          
   40          void Motor_Init(void)
   41          {
   42   1          pwm_init(MOTOR_L_PWM, 17000,0);
   43   1          pwm_init(MOTOR_R_PWM, 17000,0);
   44   1      }
   45          
   46          //--
   47          //  @brief      输出pwm
   48          //  @param      L_PWM:左电机pwm
   49          //  @param      R_PWM:右电机pwm
   50          //  @return     void         
   51          //--
   52          
   53          void Motor_PWM(int L_PWM,int R_PWM)
   54          {
   55   1        if(L_PWM<0)
   56   1        {
C251 COMPILER V5.60.0,  Motor                                                              18/05/24  19:34:38  PAGE 2   

   57   2          MOTOR_L_DIR=1;
   58   2          pwm_duty(MOTOR_L_PWM,abs(L_PWM));
   59   2        }
   60   1        else{
   61   2          MOTOR_L_DIR=0;
   62   2          pwm_duty(MOTOR_L_PWM,L_PWM);
   63   2        }
   64   1        if(R_PWM<0)
   65   1        {
   66   2          MOTOR_R_DIR=1;
   67   2          pwm_duty(MOTOR_R_PWM,abs(R_PWM));
   68   2        }
   69   1        else{
   70   2          MOTOR_R_DIR=0;
   71   2          pwm_duty(MOTOR_R_PWM,R_PWM);
   72   2        }
   73   1      }
   74          
   75          //--
   76          //  @brief      电机pid调节
   77          //  @param      kp,ki.kd
   78          //  @return     void         
   79          //--
   80          
   81          void Motor_SET_PID(float Kp,float Ki,float Kd)
   82          {
   83   1        Motor_pid.Motor_Target_Value=0;
   84   1        Motor_pid.Motor_Actual_Value=0;
   85   1        Motor_pid.Motor_err=0;
   86   1        Motor_pid.Motor_err_last=0;
   87   1        Motor_pid.Motor_err_last2=0;
   88   1        Motor_pid.Motor_Kp=Kp;
   89   1        Motor_pid.Motor_Ki=Ki;
   90   1        Motor_pid.Motor_Kd=Kd;
   91   1        Motor_pid.Motor_Out_Value=0;
   92   1        Motor_pid.Motor_integral=0;
   93   1      }
   94          
   95          /*入口：NEW_DATA 新采样值
   96                 OLD_DATA 上次滤波结果
   97                 k        滤波系数(0~255)(代表在滤波结果中的权重)
   98            出口：         本次滤波结果
   99           */
  100           char filter_1(char NEW_DATA,char OLD_DATA,char k)
  101          {
  102   1          int result;
  103   1          if(NEW_DATA<OLD_DATA)
  104   1          {
  105   2              result=OLD_DATA-NEW_DATA;
  106   2              result=result*k;
  107   2              result=result+128;//+128是为了四色五入
  108   2              result=result/256;
  109   2              result=OLD_DATA-result;
  110   2          }
  111   1          else if(NEW_DATA>OLD_DATA)
  112   1          {
  113   2              result=NEW_DATA-OLD_DATA;
  114   2              result=result*k;
  115   2              result=result+128;//+128是为了四色五入
  116   2              result=result/256;
  117   2              result=OLD_DATA-result;
  118   2          }
  119   1          else result=OLD_DATA;
  120   1          return((char)result);
  121   1      }
  122          
C251 COMPILER V5.60.0,  Motor                                                              18/05/24  19:34:38  PAGE 3   

  123          
  124          //--
  125          //  @brief      速度环
  126          //  @param      Target_Value: 目标速度
  127          //  @param      Actual_Value: 实际速度      
  128          //  @return     速度环输出        
  129          //--
  130          
  131          
  132          
  133          int LSpeed_pid_Out(int Target_Value,int Actual_Value)
  134          {
  135   1        int error = 0;
  136   1        static float last_err = 0, speed_out = 0, P_out = 0, I_out = 0, out = 0;
  137   1        error = Target_Value - Actual_Value ;
  138   1        P_out = Motor_P * (error - last_err);
  139   1        I_out = Motor_I * error;
  140   1        if (I_out > 800)
  141   1          I_out = 800;
  142   1        if (I_out < -800)
  143   1          I_out = -800;
  144   1        out = P_out + I_out;
  145   1        speed_out += out;
  146   1        last_err = error;
  147   1        speed_out=limit(speed_out, 7500);
  148   1        return (int)speed_out;
  149   1      }
  150          
  151          int RSpeed_pid_Out(int Target_Value, int Actual_Value)
  152          {
  153   1        int error = 0;
  154   1        static float last_err = 0, speed_out = 0, P_out = 0, I_out = 0, out = 0;
  155   1        error = Target_Value - Actual_Value;
  156   1        P_out = Motor_RP * (error - last_err);
  157   1        I_out = Motor_RI * error;
  158   1        if (I_out > 800)
  159   1          I_out = 800;
  160   1        if (I_out < -800)
  161   1          I_out = -800;
  162   1        out = P_out + I_out;
  163   1        speed_out += out;
  164   1        last_err = error;
  165   1        speed_out = limit(speed_out, 7500);
  166   1        return (int)speed_out;
  167   1      }
  168          
  169          
  170          
  171          void Buzzer(int time)
  172          {
  173   1        Buzzer_ON;
  174   1        delay_ms(time);
  175   1        Buzzer_OFF;
  176   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       943     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       139     ------
  bit size             =    ------     ------
C251 COMPILER V5.60.0,  Motor                                                              18/05/24  19:34:38  PAGE 4   

  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       120     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
