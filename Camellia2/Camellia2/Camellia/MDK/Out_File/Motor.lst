C251 COMPILER V5.60.0,  Motor                                                              12/04/24  21:17:47  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Motor
OBJECT MODULE PLACED IN .\Out_File\Motor.obj
COMPILER INVOKED BY: F:\Keil_c251\C251\BIN\C251.EXE ..\USER\Hardware\Motor.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src;..\USER\Hardware;..\USER\Hardware) DEBUG PRINT(.\Out_File\Motor.lst) TABS(2) OBJECT(.\Out_File\Moto
                    -r.obj) 

stmt  level    source

    1          /*
    2           * @Description: 
    3           * @Author: Yzhi
    4           * @Date: 2023-11-17 20:39:06
    5           * @LastEditTime: 2023-11-17 20:42:20
    6           * @LastEditors: Yzhi
    7           */
    8          
    9          #include "myconfig.h"
   10          
   11          
   12          
   13          #define MOTOR_MAX  10000
   14          
   15          float Motor_P = 12.3085;
   16          float Motor_I = 0.019;
   17          
   18          Motor_PID_InitTypedef Motor_pid;
   19          
   20          
   21          int16 limit(int16 In,int16 limit)
   22          {
   23   1        return (In > limit) ? limit : ((In < -limit) ? -limit : In);
   24   1      }
   25          
   26          //--
   27          //  @brief      电机PWM初始化
   28          //  @param      void
   29          //  @return     void         
   30          //--
   31          
   32          void Motor_Init(void)
   33          {
   34   1          gpio_mode(P4_2, GPO_PP);
   35   1          gpio_mode(P5_2, GPO_PP);
   36   1          //gpio_pull_set(P0_0,NOPULL);
   37   1          gpio_mode(P1_3, GPO_PP);
   38   1          gpio_mode(P2_6, GPO_PP);
   39   1          P13=0;
   40   1          pwm_init(MOTOR_L_PWM, 17000,0);
   41   1          pwm_init(MOTOR_R_PWM, 17000,0);
   42   1      }
   43          
   44          //--
   45          //  @brief      输出pwm
   46          //  @param      L_PWM:左电机pwm
   47          //  @param      R_PWM:右电机pwm
   48          //  @return     void         
   49          //--
   50          
   51          void Motor_PWM(int L_PWM,int R_PWM)
   52          {
   53   1      
   54   1        if(L_PWM<0)
   55   1        {
   56   2          MOTOR_L_DIR=1;
C251 COMPILER V5.60.0,  Motor                                                              12/04/24  21:17:47  PAGE 2   

   57   2          pwm_duty(MOTOR_L_PWM,abs(L_PWM));
   58   2        }
   59   1        else{
   60   2          MOTOR_L_DIR=0;
   61   2          pwm_duty(MOTOR_L_PWM,L_PWM);
   62   2        }
   63   1        if(R_PWM<0)
   64   1        {
   65   2          MOTOR_R_DIR=1;
   66   2          pwm_duty(MOTOR_R_PWM,abs(R_PWM));
   67   2        }
   68   1        else{
   69   2          MOTOR_R_DIR=0;
   70   2          pwm_duty(MOTOR_R_PWM,R_PWM);
   71   2        }
   72   1      }
   73          
   74          //--
   75          //  @brief      电机pid调节
   76          //  @param      kp,ki.kd
   77          //  @return     void         
   78          //--
   79          
   80          void Motor_SET_PID(float Kp,float Ki,float Kd)
   81          {
   82   1        Motor_pid.Motor_Target_Value=0;
   83   1        Motor_pid.Motor_Actual_Value=0;
   84   1        Motor_pid.Motor_err=0;
   85   1        Motor_pid.Motor_err_last=0;
   86   1        Motor_pid.Motor_err_last2=0;
   87   1        Motor_pid.Motor_Kp=Kp;
   88   1        Motor_pid.Motor_Ki=Ki;
   89   1        Motor_pid.Motor_Kd=Kd;
   90   1        Motor_pid.Motor_Out_Value=0;
   91   1        Motor_pid.Motor_integral=0;
   92   1      }
   93          
   94          /*入口：NEW_DATA 新采样值
   95                 OLD_DATA 上次滤波结果
   96                 k        滤波系数(0~255)(代表在滤波结果中的权重)
   97            出口：         本次滤波结果
   98           */
   99           char filter_1(char NEW_DATA,char OLD_DATA,char k)
  100          {
  101   1          int result;
  102   1          if(NEW_DATA<OLD_DATA)
  103   1          {
  104   2              result=OLD_DATA-NEW_DATA;
  105   2              result=result*k;
  106   2              result=result+128;//+128是为了四色五入
  107   2              result=result/256;
  108   2              result=OLD_DATA-result;
  109   2          }
  110   1          else if(NEW_DATA>OLD_DATA)
  111   1          {
  112   2              result=NEW_DATA-OLD_DATA;
  113   2              result=result*k;
  114   2              result=result+128;//+128是为了四色五入
  115   2              result=result/256;
  116   2              result=OLD_DATA-result;
  117   2          }
  118   1          else result=OLD_DATA;
  119   1          return((char)result);
  120   1      }
  121          
  122          
C251 COMPILER V5.60.0,  Motor                                                              12/04/24  21:17:47  PAGE 3   

  123          //--
  124          //  @brief      速度环
  125          //  @param      Target_Value: 目标速度
  126          //  @param      Actual_Value: 实际速度      
  127          //  @return     速度环输出        
  128          //--
  129          int Speed_pid_Out(int Target_Value,int Actual_Value)
  130          {
  131   1        float Kp_Value=0;
  132   1        int   Target_LBVal=0;//滤波之后的值
  133   1        static float Ki_Value=0,Kd_Value=0;
  134   1        float MOTOR_PWM = 0;
  135   1        //1.计算偏差
  136   1        Target_LBVal= filter_1(Target_Value,Target_LBVal,0.89); //编码器滤波
*** WARNING C188 IN LINE 136 OF ..\USER\Hardware\Motor.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 136 OF ..\USER\Hardware\Motor.c: 'parameter 2': value truncated
  137   1        Motor_pid.Motor_err=Target_Value-Actual_Value;
  138   1        if(abs(Motor_pid.Motor_err)<3)  //PID死区
  139   1        {
  140   2          Motor_pid.Motor_err=0;
  141   2          Motor_pid.Motor_err_last=0;
  142   2        }
  143   1        //2.比例运算
  144   1        Kp_Value=Motor_pid.Motor_err_last*Motor_pid.Motor_Kp;
  145   1        //3.积分运算
  146   1        Ki_Value+=Motor_pid.Motor_err;
  147   1        if(Ki_Value>1000)Ki_Value=1000;
  148   1        if(Ki_Value<-1000)Ki_Value=-1000;
  149   1        //6.更新误差
  150   1        Motor_pid.Motor_err_last2=Motor_pid.Motor_err_last;
  151   1        Motor_pid.Motor_err_last=Motor_pid.Motor_err;
  152   1        //7.输出电机执行量
  153   1        Motor_pid.Motor_Out_Value=(Kp_Value+Ki_Value*Motor_pid.Motor_Ki);
  154   1        MOTOR_PWM += Motor_pid.Motor_Out_Value;
  155   1        MOTOR_PWM = limit(MOTOR_PWM,MOTOR_MAX);
  156   1        return (int)MOTOR_PWM;
  157   1      }
  158          
  159          
  160          
  161          void Buzzer(int time)
  162          {
  163   1        Buzzer_ON;
  164   1        delay_ms(time);
  165   1        Buzzer_OFF;
  166   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       812     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        97     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        32     ------
End of Module Information.

C251 COMPILER V5.60.0,  Motor                                                              12/04/24  21:17:47  PAGE 4   


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
